import pytest
from app.services.ai_service import generate_response

def test_generate_response_basic():
    from unittest.mock import MagicMock, patch
    from app.services.ai_service import AIService

    # Mock get_settings to avoid actual config loading and API key requirement
    mock_settings = MagicMock()
    mock_settings.GOOGLE_API_KEY = "dummy_api_key"
    
    with patch('app.utils.config.get_settings', return_value=mock_settings):
        # Mock google.genai.Client to prevent actual API calls
        with patch('google.genai.Client') as MockGenaiClient:
            # Instantiate AIService - it will use the mocked components
            # We also need to mock ProductDataService within AIService init if it's accessed,
            # but for generate_response it's not directly relevant, only for get_response.
            # However, the constructor still tries to init it.
            with patch('app.services.product_data_service.ProductDataService'):
                ai_service = AIService()

                # Prepare the mock response object that generate_content would return
                mock_ai_response = MagicMock()
                mock_ai_response.text = "This is a test response generated by AI."
                
                # Configure the mock client's generate_content method to return our mock response
                # MockGenaiClient.return_value is the mock instance of genai.Client
                MockGenaiClient.return_value.models.generate_content.return_value = mock_ai_response

                # Define a simple context for the test
                test_context = "This is a simple test context for the AI."

                # Define the expected prompt that generate_response will construct
                expected_prompt = f"""You are a helpful product assistant. Based on the following context, provide a helpful and informative response:

{test_context}

Please provide a clear and concise answer that helps the user understand the products and make an informed decision."""

                # Call the function under test
                response = ai_service.generate_response(test_context)

                # Assertions
                # 1. Verify that generate_content was called with the correct model and prompt
                MockGenaiClient.return_value.models.generate_content.assert_called_once_with(
                    model="gemini-2.0-flash",
                    contents=expected_prompt
                )
                
                # 2. Verify that the function returns the expected text from the mocked AI response
                assert response == "This is a test response generated by AI."
