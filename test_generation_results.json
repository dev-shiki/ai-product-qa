{
  "processed_files": [
    {
      "filepath": "app/services/ai_service.py",
      "coverage": 4.839,
      "test_generated": true,
      "test_saved": true,
      "test_result": {
        "success": false,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.11.13, pytest-7.4.3, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.11.13/x64/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/work/ai-product-qa/ai-product-qa\nplugins: anyio-4.9.0, cov-4.1.0, asyncio-0.23.6\nasyncio: mode=Mode.STRICT\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________ ERROR collecting tests/test_services/ai_service.py ______________\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/runner.py:341: in from_call\n    result: Optional[TResult] = func()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/runner.py:372: in <lambda>\n    call = CallInfo.from_call(lambda: list(collector.collect()), \"collect\")\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pytest_asyncio/plugin.py:640: in _patched_collect\n    module = collector.obj\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/python.py:310: in obj\n    self._obj = obj = self._getobj()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/python.py:528: in _getobj\n    return self._importtestmodule()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/python.py:617: in _importtestmodule\n    mod = import_path(self.path, mode=importmode, root=self.config.rootpath)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/pathlib.py:567: in import_path\n    importlib.import_module(module_name)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1204: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1176: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:690: in _load_unlocked\n    ???\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/test_services/ai_service.py:10: in <module>\n    from app.services.ai_service import AIService\napp/services/ai_service.py:3: in <module>\n    from app.utils.config import get_settings\napp/utils/config.py:30: in <module>\n    settings = get_settings()\napp/utils/config.py:28: in get_settings\n    return Settings()\napp/utils/config.py:21: in __init__\n    super().__init__(**kwargs)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic_settings/main.py:176: in __init__\n    super().__init__(\nE   pydantic_core._pydantic_core.ValidationError: 1 validation error for Settings\nE   GOOGLE_API_KEY\nE     Field required [type=missing, input_value={}, input_type=dict]\nE       For further information visit https://errors.pydantic.dev/2.11/v/missing\n=============================== warnings summary ===============================\n../../../../../opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/_internal/_config.py:323\n  /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/\n    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_services/ai_service.py - pydantic_core._pydantic_core.ValidationError: 1 validation error for Settings\nGOOGLE_API_KEY\n  Field required [type=missing, input_value={}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n========================= 1 warning, 1 error in 0.74s ==========================\n",
        "stderr": "",
        "returncode": 2
      }
    },
    {
      "filepath": "app/services/local_product_service.py",
      "coverage": 11.540000000000001,
      "test_generated": true,
      "test_saved": true,
      "test_result": {
        "success": false,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.11.13, pytest-7.4.3, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.11.13/x64/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/work/ai-product-qa/ai-product-qa\nplugins: anyio-4.9.0, cov-4.1.0, asyncio-0.23.6\nasyncio: mode=Mode.STRICT\ncollecting ... collected 71 items\n\ntests/test_services/local_product_service.py::test_init_success PASSED   [  1%]\ntests/test_services/local_product_service.py::test_load_local_products_file_not_found FAILED [  2%]\ntests/test_services/local_product_service.py::test_load_local_products_valid_json_utf8 FAILED [  4%]\ntests/test_services/local_product_service.py::test_load_local_products_valid_json_utf16le_with_bom FAILED [  5%]\ntests/test_services/local_product_service.py::test_load_local_products_invalid_json_all_encodings_fail FAILED [  7%]\ntests/test_services/local_product_service.py::test_load_local_products_unicode_decode_error_all_encodings_fail FAILED [  8%]\ntests/test_services/local_product_service.py::test_load_local_products_generic_exception FAILED [  9%]\ntests/test_services/local_product_service.py::test_load_local_products_empty_products_list_in_json FAILED [ 11%]\ntests/test_services/local_product_service.py::test_load_local_products_json_missing_products_key FAILED [ 12%]\ntests/test_services/local_product_service.py::test_get_fallback_products PASSED [ 14%]\ntests/test_services/local_product_service.py::test_search_products_basic_keyword_match PASSED [ 15%]\ntests/test_services/local_product_service.py::test_search_products_case_insensitivity PASSED [ 16%]\ntests/test_services/local_product_service.py::test_search_products_no_match PASSED [ 18%]\ntests/test_services/local_product_service.py::test_search_products_with_limit PASSED [ 19%]\ntests/test_services/local_product_service.py::test_search_products_keyword_in_category_brand_specs PASSED [ 21%]\ntests/test_services/local_product_service.py::test_search_products_price_extraction_juta PASSED [ 22%]\ntests/test_services/local_product_service.py::test_search_products_price_extraction_ribu PASSED [ 23%]\ntests/test_services/local_product_service.py::test_search_products_price_extraction_rp PASSED [ 25%]\ntests/test_services/local_product_service.py::test_search_products_price_extraction_budget_keyword PASSED [ 26%]\ntests/test_services/local_product_service.py::test_search_products_error_handling FAILED [ 28%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_juta PASSED [ 29%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_ribu PASSED [ 30%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_rp PASSED [ 32%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_k_m PASSED [ 33%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_budget_keywords PASSED [ 35%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_no_match PASSED [ 36%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_error_handling PASSED [ 38%]\ntests/test_services/local_product_service.py::test_get_product_details_found PASSED [ 39%]\ntests/test_services/local_product_service.py::test_get_product_details_not_found PASSED [ 40%]\ntests/test_services/local_product_service.py::test_get_product_details_empty_products_list PASSED [ 42%]\ntests/test_services/local_product_service.py::test_get_product_details_error_handling FAILED [ 43%]\ntests/test_services/local_product_service.py::test_get_categories PASSED [ 45%]\ntests/test_services/local_product_service.py::test_get_categories_empty_products_list PASSED [ 46%]\ntests/test_services/local_product_service.py::test_get_categories_with_missing_category_key PASSED [ 47%]\ntests/test_services/local_product_service.py::test_get_brands PASSED     [ 49%]\ntests/test_services/local_product_service.py::test_get_brands_empty_products_list PASSED [ 50%]\ntests/test_services/local_product_service.py::test_get_brands_with_missing_brand_key PASSED [ 52%]\ntests/test_services/local_product_service.py::test_get_products_by_category_found PASSED [ 53%]\ntests/test_services/local_product_service.py::test_get_products_by_category_case_insensitivity PASSED [ 54%]\ntests/test_services/local_product_service.py::test_get_products_by_category_not_found PASSED [ 56%]\ntests/test_services/local_product_service.py::test_get_products_by_category_empty_products_list PASSED [ 57%]\ntests/test_services/local_product_service.py::test_get_products_by_category_error_handling FAILED [ 59%]\ntests/test_services/local_product_service.py::test_get_products_by_brand_found PASSED [ 60%]\ntests/test_services/local_product_service.py::test_get_products_by_brand_case_insensitivity PASSED [ 61%]\ntests/test_services/local_product_service.py::test_get_products_by_brand_not_found PASSED [ 63%]\ntests/test_services/local_product_service.py::test_get_products_by_brand_empty_products_list PASSED [ 64%]\ntests/test_services/local_product_service.py::test_get_products_by_brand_error_handling FAILED [ 66%]\ntests/test_services/local_product_service.py::test_get_top_rated_products PASSED [ 67%]\ntests/test_services/local_product_service.py::test_get_top_rated_products_limit_greater_than_available PASSED [ 69%]\ntests/test_services/local_product_service.py::test_get_top_rated_products_empty_products_list PASSED [ 70%]\ntests/test_services/local_product_service.py::test_get_top_rated_products_with_missing_rating_key PASSED [ 71%]\ntests/test_services/local_product_service.py::test_get_top_rated_products_error_handling FAILED [ 73%]\ntests/test_services/local_product_service.py::test_get_best_selling_products FAILED [ 74%]\ntests/test_services/local_product_service.py::test_get_best_selling_products_limit_greater_than_available FAILED [ 76%]\ntests/test_services/local_product_service.py::test_get_best_selling_products_empty_products_list PASSED [ 77%]\ntests/test_services/local_product_service.py::test_get_best_selling_products_with_missing_sold_key PASSED [ 78%]\ntests/test_services/local_product_service.py::test_get_best_selling_products_error_handling FAILED [ 80%]\ntests/test_services/local_product_service.py::test_get_products PASSED   [ 81%]\ntests/test_services/local_product_service.py::test_get_products_limit_greater_than_available PASSED [ 83%]\ntests/test_services/local_product_service.py::test_get_products_empty_products_list PASSED [ 84%]\ntests/test_services/local_product_service.py::test_get_products_error_handling FAILED [ 85%]\ntests/test_services/local_product_service.py::test_smart_search_products_best_request_general PASSED [ 87%]\ntests/test_services/local_product_service.py::test_smart_search_products_best_request_specific_category_found PASSED [ 88%]\ntests/test_services/local_product_service.py::test_smart_search_products_best_request_specific_category_not_found_fallback PASSED [ 90%]\ntests/test_services/local_product_service.py::test_smart_search_products_all_criteria_match FAILED [ 91%]\ntests/test_services/local_product_service.py::test_smart_search_products_no_exact_match_fallback_to_category PASSED [ 92%]\ntests/test_services/local_product_service.py::test_smart_search_products_no_category_match_fallback_to_budget FAILED [ 94%]\ntests/test_services/local_product_service.py::test_smart_search_products_no_match_all_fallbacks_popular FAILED [ 95%]\ntests/test_services/local_product_service.py::test_smart_search_products_empty_keyword_only_category FAILED [ 97%]\ntests/test_services/local_product_service.py::test_smart_search_products_empty_keyword_only_max_price FAILED [ 98%]\ntests/test_services/local_product_service.py::test_smart_search_products_empty_all_filters PASSED [100%]\n\n=================================== FAILURES ===================================\n___________________ test_load_local_products_file_not_found ____________________\ntests/test_services/local_product_service.py:190: in test_load_local_products_file_not_found\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 2 times.\nE   Calls: [call(\"Error loading products from JSON file: [Errno 2] No such file or directory: 'MagicMock/Path().parent.parent.parent.__truediv__().__truediv__()/139834934147984'\"),\nE    call(\"Error loading products from JSON file: [Errno 2] No such file or directory: 'MagicMock/Path().parent.parent.parent.__truediv__().__truediv__()/139834934147984'\")].\n___________________ test_load_local_products_valid_json_utf8 ___________________\ntests/test_services/local_product_service.py:217: in test_load_local_products_valid_json_utf8\n    assert products[0]['specifications']['sold'] == 1000 # Verify mocked random.randint\nE   assert 500 == 1000\n_____________ test_load_local_products_valid_json_utf16le_with_bom _____________\ntests/test_services/local_product_service.py:255: in test_load_local_products_valid_json_utf16le_with_bom\n    assert len(products) == len(TRANSFORMED_MOCK_PRODUCTS_DATA)\nE   AssertionError: assert 8 == 6\nE    +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\nE    +  and   6 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}])\n___________ test_load_local_products_invalid_json_all_encodings_fail ___________\ntests/test_services/local_product_service.py:293: in test_load_local_products_invalid_json_all_encodings_fail\n    mock_logger.warning.assert_any_call(f\"Failed to load with {encoding} encoding: json.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\")\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1010: in assert_any_call\n    raise AssertionError(\nE   AssertionError: warning('Failed to load with utf-16-le encoding: json.JSONDecodeError: Expecting value: line 1 column 1 (char 0)') call not found\n_______ test_load_local_products_unicode_decode_error_all_encodings_fail _______\ntests/test_services/local_product_service.py:324: in test_load_local_products_unicode_decode_error_all_encodings_fail\n    mock_logger.warning.assert_any_call(f\"Failed to load with {encoding} encoding: mockcodec: mock reason\")\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1010: in assert_any_call\n    raise AssertionError(\nE   AssertionError: warning('Failed to load with utf-16-le encoding: mockcodec: mock reason') call not found\n__________________ test_load_local_products_generic_exception __________________\ntests/test_services/local_product_service.py:349: in test_load_local_products_generic_exception\n    mock_fallback.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected '_get_fallback_products' to have been called once. Called 2 times.\nE   Calls: [call(), call().__len__(), call()].\n_____________ test_load_local_products_empty_products_list_in_json _____________\ntests/test_services/local_product_service.py:370: in test_load_local_products_empty_products_list_in_json\n    mock_logger.info.assert_any_call(\"Successfully loaded 0 products from JSON file using utf-8 encoding\")\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1010: in assert_any_call\n    raise AssertionError(\nE   AssertionError: info('Successfully loaded 0 products from JSON file using utf-8 encoding') call not found\n______________ test_load_local_products_json_missing_products_key ______________\ntests/test_services/local_product_service.py:391: in test_load_local_products_json_missing_products_key\n    mock_logger.info.assert_any_call(\"Successfully loaded 0 products from JSON file using utf-8 encoding\")\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1010: in assert_any_call\n    raise AssertionError(\nE   AssertionError: info('Successfully loaded 0 products from JSON file using utf-8 encoding') call not found\n_____________________ test_search_products_error_handling ______________________\ntests/test_services/local_product_service.py:517: in test_search_products_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n___________________ test_get_product_details_error_handling ____________________\ntests/test_services/local_product_service.py:600: in test_get_product_details_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n_________________ test_get_products_by_category_error_handling _________________\ntests/test_services/local_product_service.py:720: in test_get_products_by_category_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n__________________ test_get_products_by_brand_error_handling ___________________\ntests/test_services/local_product_service.py:769: in test_get_products_by_brand_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n__________________ test_get_top_rated_products_error_handling __________________\ntests/test_services/local_product_service.py:838: in test_get_top_rated_products_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n________________________ test_get_best_selling_products ________________________\ntests/test_services/local_product_service.py:849: in test_get_best_selling_products\n    assert products[0]['id'] == 'prod5'\nE   AssertionError: assert 'prod1' == 'prod5'\nE     - prod5\nE     ?     ^\nE     + prod1\nE     ?     ^\n_________ test_get_best_selling_products_limit_greater_than_available __________\ntests/test_services/local_product_service.py:863: in test_get_best_selling_products_limit_greater_than_available\n    assert products[0]['id'] == 'prod5'\nE   AssertionError: assert 'prod1' == 'prod5'\nE     - prod5\nE     ?     ^\nE     + prod1\nE     ?     ^\n________________ test_get_best_selling_products_error_handling _________________\ntests/test_services/local_product_service.py:906: in test_get_best_selling_products_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n_______________________ test_get_products_error_handling _______________________\ntests/test_services/local_product_service.py:946: in test_get_products_error_handling\n    assert products == []\nE   AssertionError: assert <MagicMock na...834934965520'> == []\nE     Full diff:\nE     - []\nE     + <MagicMock name='mock.__getitem__()' id='139834934965520'>\n________________ test_smart_search_products_all_criteria_match _________________\ntests/test_services/local_product_service.py:994: in test_smart_search_products_all_criteria_match\n    assert len(products) == 2\nE   AssertionError: assert 1 == 2\nE    +  where 1 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}])\n_______ test_smart_search_products_no_category_match_fallback_to_budget ________\ntests/test_services/local_product_service.py:1021: in test_smart_search_products_no_category_match_fallback_to_budget\n    assert {p['id'] for p in products} == {'prod1', 'prod3', 'prod5'} # Should contain 2 of these\nE   AssertionError: assert {'prod1', 'prod3'} == {'prod1', 'prod3', 'prod5'}\nE     Extra items in the right set:\nE     'prod5'\nE     Full diff:\nE     - {'prod3', 'prod1', 'prod5'}\nE     ?                  ---------\nE     + {'prod3', 'prod1'}\n__________ test_smart_search_products_no_match_all_fallbacks_popular ___________\ntests/test_services/local_product_service.py:1033: in test_smart_search_products_no_match_all_fallbacks_popular\n    assert products[0]['id'] == 'prod5'\nE   AssertionError: assert 'prod1' == 'prod5'\nE     - prod5\nE     ?     ^\nE     + prod1\nE     ?     ^\n____________ test_smart_search_products_empty_keyword_only_category ____________\ntests/test_services/local_product_service.py:1045: in test_smart_search_products_empty_keyword_only_category\n    assert {p['id'] for p in products} == {'prod1', 'prod3', 'prod5'} # Should contain 2 of these\nE   AssertionError: assert {'prod1', 'prod3'} == {'prod1', 'prod3', 'prod5'}\nE     Extra items in the right set:\nE     'prod5'\nE     Full diff:\nE     - {'prod3', 'prod1', 'prod5'}\nE     ?                  ---------\nE     + {'prod3', 'prod1'}\n___________ test_smart_search_products_empty_keyword_only_max_price ____________\ntests/test_services/local_product_service.py:1056: in test_smart_search_products_empty_keyword_only_max_price\n    assert {p['id'] for p in products} == {'prod1', 'prod3', 'prod5'} # Should contain 2 of these\nE   AssertionError: assert {'prod1', 'prod3'} == {'prod1', 'prod3', 'prod5'}\nE     Extra items in the right set:\nE     'prod5'\nE     Full diff:\nE     - {'prod3', 'prod1', 'prod5'}\nE     ?                  ---------\nE     + {'prod3', 'prod1'}\n=========================== short test summary info ============================\nFAILED tests/test_services/local_product_service.py::test_load_local_products_file_not_found - AssertionError: Expected 'error' to have been called once. Called 2 times.\nCalls: [call(\"Error loading products from JSON file: [Errno 2] No such file or directory: 'MagicMock/Path().parent.parent.parent.__truediv__().__truediv__()/139834934147984'\"),\n call(\"Error loading products from JSON file: [Errno 2] No such file or directory: 'MagicMock/Path().parent.parent.parent.__truediv__().__truediv__()/139834934147984'\")].\nFAILED tests/test_services/local_product_service.py::test_load_local_products_valid_json_utf8 - assert 500 == 1000\nFAILED tests/test_services/local_product_service.py::test_load_local_products_valid_json_utf16le_with_bom - AssertionError: assert 8 == 6\n +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\n +  and   6 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}])\nFAILED tests/test_services/local_product_service.py::test_load_local_products_invalid_json_all_encodings_fail - AssertionError: warning('Failed to load with utf-16-le encoding: json.JSONDecodeError: Expecting value: line 1 column 1 (char 0)') call not found\nFAILED tests/test_services/local_product_service.py::test_load_local_products_unicode_decode_error_all_encodings_fail - AssertionError: warning('Failed to load with utf-16-le encoding: mockcodec: mock reason') call not found\nFAILED tests/test_services/local_product_service.py::test_load_local_products_generic_exception - AssertionError: Expected '_get_fallback_products' to have been called once. Called 2 times.\nCalls: [call(), call().__len__(), call()].\nFAILED tests/test_services/local_product_service.py::test_load_local_products_empty_products_list_in_json - AssertionError: info('Successfully loaded 0 products from JSON file using utf-8 encoding') call not found\nFAILED tests/test_services/local_product_service.py::test_load_local_products_json_missing_products_key - AssertionError: info('Successfully loaded 0 products from JSON file using utf-8 encoding') call not found\nFAILED tests/test_services/local_product_service.py::test_search_products_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_get_product_details_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_get_products_by_category_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_get_products_by_brand_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_get_top_rated_products_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_get_best_selling_products - AssertionError: assert 'prod1' == 'prod5'\n  - prod5\n  ?     ^\n  + prod1\n  ?     ^\nFAILED tests/test_services/local_product_service.py::test_get_best_selling_products_limit_greater_than_available - AssertionError: assert 'prod1' == 'prod5'\n  - prod5\n  ?     ^\n  + prod1\n  ?     ^\nFAILED tests/test_services/local_product_service.py::test_get_best_selling_products_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_get_products_error_handling - AssertionError: assert <MagicMock na...834934965520'> == []\n  Full diff:\n  - []\n  + <MagicMock name='mock.__getitem__()' id='139834934965520'>\nFAILED tests/test_services/local_product_service.py::test_smart_search_products_all_criteria_match - AssertionError: assert 1 == 2\n +  where 1 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}])\nFAILED tests/test_services/local_product_service.py::test_smart_search_products_no_category_match_fallback_to_budget - AssertionError: assert {'prod1', 'prod3'} == {'prod1', 'prod3', 'prod5'}\n  Extra items in the right set:\n  'prod5'\n  Full diff:\n  - {'prod3', 'prod1', 'prod5'}\n  ?                  ---------\n  + {'prod3', 'prod1'}\nFAILED tests/test_services/local_product_service.py::test_smart_search_products_no_match_all_fallbacks_popular - AssertionError: assert 'prod1' == 'prod5'\n  - prod5\n  ?     ^\n  + prod1\n  ?     ^\nFAILED tests/test_services/local_product_service.py::test_smart_search_products_empty_keyword_only_category - AssertionError: assert {'prod1', 'prod3'} == {'prod1', 'prod3', 'prod5'}\n  Extra items in the right set:\n  'prod5'\n  Full diff:\n  - {'prod3', 'prod1', 'prod5'}\n  ?                  ---------\n  + {'prod3', 'prod1'}\nFAILED tests/test_services/local_product_service.py::test_smart_search_products_empty_keyword_only_max_price - AssertionError: assert {'prod1', 'prod3'} == {'prod1', 'prod3', 'prod5'}\n  Extra items in the right set:\n  'prod5'\n  Full diff:\n  - {'prod3', 'prod1', 'prod5'}\n  ?                  ---------\n  + {'prod3', 'prod1'}\n======================== 22 failed, 49 passed in 0.90s =========================\n",
        "stderr": "",
        "returncode": 1
      }
    },
    {
      "filepath": "app/services/product_data_service.py",
      "coverage": 20.73,
      "test_generated": true,
      "test_saved": true,
      "test_result": {
        "success": false,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.11.13, pytest-7.4.3, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.11.13/x64/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/work/ai-product-qa/ai-product-qa\nplugins: anyio-4.9.0, cov-4.1.0, asyncio-0.23.6\nasyncio: mode=Mode.STRICT\ncollecting ... collected 31 items\n\ntests/test_services/product_data_service.py::TestProductDataService::test_init ERROR [  3%]\ntests/test_services/product_data_service.py::TestProductDataService::test_search_products_success ERROR [  6%]\ntests/test_services/product_data_service.py::TestProductDataService::test_search_products_no_results ERROR [  9%]\ntests/test_services/product_data_service.py::TestProductDataService::test_search_products_exception ERROR [ 12%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_with_search ERROR [ 16%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_with_category ERROR [ 19%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_no_filters ERROR [ 22%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_exception_fallback ERROR [ 25%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_categories_success ERROR [ 29%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_categories_exception ERROR [ 32%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_success ERROR [ 35%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_exception ERROR [ 38%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_success ERROR [ 41%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_exception ERROR [ 45%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_success ERROR [ 48%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_no_results ERROR [ 51%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_exception ERROR [ 54%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_success ERROR [ 58%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_no_results ERROR [ 61%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_exception ERROR [ 64%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_success ERROR [ 67%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_not_found ERROR [ 70%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_exception ERROR [ 74%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_brands_success ERROR [ 77%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_brands_exception ERROR [ 80%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_success ERROR [ 83%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_no_results ERROR [ 87%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_exception ERROR [ 90%]\ntests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_success ERROR [ 93%]\ntests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_default_args ERROR [ 96%]\ntests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_exception ERROR [100%]\n\n==================================== ERRORS ====================================\n______________ ERROR at setup of TestProductDataService.test_init ______________\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 89\n      @pytest.mark.asyncio\n      async def test_init(self, mock_local_service, caplog):\n          \"\"\"Test ProductDataService initialization.\"\"\"\n          from app.services.product_data_service import ProductDataService\n          with caplog.at_level(logging.INFO):\n              service = ProductDataService()\n              assert service.local_service is mock_local_service\n              assert \"ProductDataService initialized with LocalProductService\" in caplog.text\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n____ ERROR at setup of TestProductDataService.test_search_products_success _____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 98\n      @pytest.mark.asyncio\n      async def test_search_products_success(self, product_data_service, mock_run_in_executor, caplog):\n          \"\"\"Test search_products returns products successfully.\"\"\"\n          expected_products = [{\"id\": \"1\", \"name\": \"Laptop\", \"price\": 1200}]\n          mock_run_in_executor.return_value = expected_products\n\n          with caplog.at_level(logging.INFO):\n              products = await product_data_service.search_products(\"laptop\", limit=5)\n              assert products == expected_products\n              assert \"Searching products with keyword: laptop\" in caplog.text\n              assert \"Found 1 products for keyword: laptop\" in caplog.text\n\n          # Verify run_in_executor was called with the correct local_service method and arguments\n          product_data_service.local_service.search_products.assert_called_once_with(\"laptop\", 5)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n___ ERROR at setup of TestProductDataService.test_search_products_no_results ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 113\n      @pytest.mark.asyncio\n      async def test_search_products_no_results(self, product_data_service, mock_run_in_executor, caplog):\n          \"\"\"Test search_products returns an empty list when no products are found.\"\"\"\n          mock_run_in_executor.return_value = []\n\n          with caplog.at_level(logging.INFO):\n              products = await product_data_service.search_products(\"nonexistent\", limit=10)\n              assert products == []\n              assert \"Found 0 products for keyword: nonexistent\" in caplog.text\n\n          product_data_service.local_service.search_products.assert_called_once_with(\"nonexistent\", 10)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n___ ERROR at setup of TestProductDataService.test_search_products_exception ____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 125\n      @pytest.mark.asyncio\n      async def test_search_products_exception(self, product_data_service, mock_run_in_executor, caplog):\n          \"\"\"Test search_products handles exceptions gracefully and logs an error.\"\"\"\n          mock_run_in_executor.side_effect = Exception(\"Local service error during search\")\n\n          with caplog.at_level(logging.ERROR):\n              products = await product_data_service.search_products(\"error_case\")\n              assert products == []\n              assert \"Error searching products: Local service error during search\" in caplog.text\n\n          product_data_service.local_service.search_products.assert_called_once_with(\"error_case\", 10)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n____ ERROR at setup of TestProductDataService.test_get_products_with_search ____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 138\n      @pytest.mark.asyncio\n      async def test_get_products_with_search(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test get_products dispatches to search_products when 'search' keyword is present.\"\"\"\n          expected_products = [{\"id\": \"s1\", \"name\": \"Search Result\"}]\n          # Mock the underlying call that search_products uses\n          product_data_service.local_service.search_products.return_value = expected_products\n          mock_run_in_executor.return_value = expected_products # Ensures the await in search_products gets the value\n\n          products = await product_data_service.get_products(search=\"query\", limit=5)\n          assert products == expected_products\n          # Verify that local_service.search_products was called via run_in_executor\n          product_data_service.local_service.search_products.assert_called_once_with(\"query\", 5)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n___ ERROR at setup of TestProductDataService.test_get_products_with_category ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 151\n      @pytest.mark.asyncio\n      async def test_get_products_with_category(self, product_data_service):\n          \"\"\"Test get_products dispatches to get_products_by_category when 'category' is present.\"\"\"\n          expected_products = [{\"id\": \"c1\", \"name\": \"Category Item\"}]\n          product_data_service.local_service.get_products_by_category.return_value = expected_products\n\n          products = await product_data_service.get_products(category=\"electronics\", limit=10)\n          assert products == expected_products\n          product_data_service.local_service.get_products_by_category.assert_called_once_with(\"electronics\")\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n____ ERROR at setup of TestProductDataService.test_get_products_no_filters _____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 161\n      @pytest.mark.asyncio\n      async def test_get_products_no_filters(self, product_data_service):\n          \"\"\"Test get_products dispatches to get_all_products when no filters are present.\"\"\"\n          expected_products = [{\"id\": \"a1\", \"name\": \"All Item\"}]\n          product_data_service.local_service.get_products.return_value = expected_products\n\n          products = await product_data_service.get_products(limit=15)\n          assert products == expected_products\n          product_data_service.local_service.get_products.assert_called_once_with(15)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_products_exception_fallback _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 171\n      @pytest.mark.asyncio\n      async def test_get_products_exception_fallback(self, product_data_service, mock_run_in_executor, caplog):\n          \"\"\"Test get_products falls back to local_service.get_products on error in dispatch.\"\"\"\n          # Simulate an error in the search path to trigger the fallback\n          mock_run_in_executor.side_effect = Exception(\"Search path failed\")\n\n          # Configure fallback method's return value\n          fallback_products = [{\"id\": \"fallback\", \"name\": \"Fallback Product\"}]\n          product_data_service.local_service.get_products.return_value = fallback_products\n\n          with caplog.at_level(logging.ERROR):\n              products = await product_data_service.get_products(search=\"err\", limit=5)\n              assert products == fallback_products\n              assert \"Error getting products: Search path failed\" in caplog.text\n\n          # Verify fallback call\n          product_data_service.local_service.get_products.assert_called_once_with(5)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_____ ERROR at setup of TestProductDataService.test_get_categories_success _____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 190\n      @pytest.mark.asyncio\n      async def test_get_categories_success(self, product_data_service):\n          \"\"\"Test get_categories returns categories successfully.\"\"\"\n          expected_categories = [\"Electronics\", \"Books\", \"Clothing\"]\n          product_data_service.local_service.get_categories.return_value = expected_categories\n\n          categories = await product_data_service.get_categories()\n          assert categories == expected_categories\n          product_data_service.local_service.get_categories.assert_called_once()\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n____ ERROR at setup of TestProductDataService.test_get_categories_exception ____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 200\n      @pytest.mark.asyncio\n      async def test_get_categories_exception(self, product_data_service, caplog):\n          \"\"\"Test get_categories handles exceptions gracefully.\"\"\"\n          product_data_service.local_service.get_categories.side_effect = Exception(\"Category service down\")\n\n          with caplog.at_level(logging.ERROR):\n              categories = await product_data_service.get_categories()\n              assert categories == []\n              assert \"Error getting categories: Category service down\" in caplog.text\n\n          product_data_service.local_service.get_categories.assert_called_once()\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_top_rated_products_success _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 213\n      @pytest.mark.asyncio\n      async def test_get_top_rated_products_success(self, product_data_service):\n          \"\"\"Test get_top_rated_products returns products successfully.\"\"\"\n          expected_products = [{\"id\": \"t1\", \"name\": \"Top Product\", \"rating\": 5.0}]\n          product_data_service.local_service.get_top_rated_products.return_value = expected_products\n\n          products = await product_data_service.get_top_rated_products(limit=2)\n          assert products == expected_products\n          product_data_service.local_service.get_top_rated_products.assert_called_once_with(2)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_top_rated_products_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 223\n      @pytest.mark.asyncio\n      async def test_get_top_rated_products_exception(self, product_data_service, caplog):\n          \"\"\"Test get_top_rated_products handles exceptions gracefully.\"\"\"\n          product_data_service.local_service.get_top_rated_products.side_effect = Exception(\"Top rated service error\")\n\n          with caplog.at_level(logging.ERROR):\n              products = await product_data_service.get_top_rated_products()\n              assert products == []\n              assert \"Error getting top rated products: Top rated service error\" in caplog.text\n\n          product_data_service.local_service.get_top_rated_products.assert_called_once_with(10)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_best_selling_products_success _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 236\n      @pytest.mark.asyncio\n      async def test_get_best_selling_products_success(self, product_data_service):\n          \"\"\"Test get_best_selling_products returns products successfully.\"\"\"\n          expected_products = [{\"id\": \"b1\", \"name\": \"Best Seller\", \"sales\": 1000}]\n          product_data_service.local_service.get_best_selling_products.return_value = expected_products\n\n          products = await product_data_service.get_best_selling_products(limit=3)\n          assert products == expected_products\n          product_data_service.local_service.get_best_selling_products.assert_called_once_with(3)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_best_selling_products_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 246\n      @pytest.mark.asyncio\n      async def test_get_best_selling_products_exception(self, product_data_service, caplog):\n          \"\"\"Test get_best_selling_products handles exceptions gracefully.\"\"\"\n          product_data_service.local_service.get_best_selling_products.side_effect = Exception(\"Best selling service error\")\n\n          with caplog.at_level(logging.ERROR):\n              products = await product_data_service.get_best_selling_products()\n              assert products == []\n              assert \"Error getting best selling products: Best selling service error\" in caplog.text\n\n          product_data_service.local_service.get_best_selling_products.assert_called_once_with(10)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_products_by_category_success _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 259\n      def test_get_products_by_category_success(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_products_by_category_no_results _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 270\n      def test_get_products_by_category_no_results(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_products_by_category_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 278\n      def test_get_products_by_category_exception(self, product_data_service, caplog):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n____ ERROR at setup of TestProductDataService.test_get_all_products_success ____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 290\n      def test_get_all_products_success(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n__ ERROR at setup of TestProductDataService.test_get_all_products_no_results ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 300\n      def test_get_all_products_no_results(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n___ ERROR at setup of TestProductDataService.test_get_all_products_exception ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 308\n      def test_get_all_products_exception(self, product_data_service, caplog):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n__ ERROR at setup of TestProductDataService.test_get_product_details_success ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 320\n      def test_get_product_details_success(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_product_details_not_found __\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 329\n      def test_get_product_details_not_found(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_product_details_exception __\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 337\n      def test_get_product_details_exception(self, product_data_service, caplog):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_______ ERROR at setup of TestProductDataService.test_get_brands_success _______\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 349\n      def test_get_brands_success(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n______ ERROR at setup of TestProductDataService.test_get_brands_exception ______\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 358\n      def test_get_brands_exception(self, product_data_service, caplog):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_products_by_brand_success __\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 370\n      def test_get_products_by_brand_success(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_products_by_brand_no_results _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 380\n      def test_get_products_by_brand_no_results(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_get_products_by_brand_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 388\n      def test_get_products_by_brand_exception(self, product_data_service, caplog):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_smart_search_products_success __\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 400\n      @pytest.mark.asyncio\n      async def test_smart_search_products_success(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test smart_search_products returns products and message successfully.\"\"\"\n          expected_products = [{\"id\": \"s_s1\", \"name\": \"Smart Item\"}]\n          expected_message = \"Smart search completed.\"\n          mock_run_executor_result = (expected_products, expected_message)\n          mock_run_in_executor.return_value = mock_run_executor_result # What the await resolves to\n\n          products, message = await product_data_service.smart_search_products(\n              keyword=\"smart\", category=\"books\", max_price=50, limit=3\n          )\n          assert products == expected_products\n          assert message == expected_message\n\n          product_data_service.local_service.smart_search_products.assert_called_once_with(\n              \"smart\", \"books\", 50, 3\n          )\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_smart_search_products_default_args _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 418\n      @pytest.mark.asyncio\n      async def test_smart_search_products_default_args(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test smart_search_products uses default arguments correctly.\"\"\"\n          expected_products = [{\"id\": \"s_s_def\", \"name\": \"Default Search\"}]\n          expected_message = \"Default search.\"\n          mock_run_executor_result = (expected_products, expected_message)\n          mock_run_in_executor.return_value = mock_run_executor_result\n\n          products, message = await product_data_service.smart_search_products() # No args\n          assert products == expected_products\n          assert message == expected_message\n\n          # Verify that the local service method was called with default values\n          product_data_service.local_service.smart_search_products.assert_called_once_with(\n              '', None, None, 5\n          )\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n_ ERROR at setup of TestProductDataService.test_smart_search_products_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 435\n      @pytest.mark.asyncio\n      async def test_smart_search_products_exception(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test smart_search_products propagates exceptions as it has no try-except.\"\"\"\n          mock_run_in_executor.side_effect = Exception(\"Smart search internal error\")\n\n          with pytest.raises(Exception, match=\"Smart search internal error\"):\n              await product_data_service.smart_search_products(\"fail_keyword\")\n\n          # Verify that the local service method was still attempted to be called\n          product_data_service.local_service.smart_search_products.assert_called_once_with(\"fail_keyword\", None, None, 5)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 53\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 25\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:25\n=========================== short test summary info ============================\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_init\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_search_products_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_search_products_no_results\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_search_products_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_with_search\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_with_category\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_no_filters\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_exception_fallback\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_categories_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_categories_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_no_results\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_no_results\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_not_found\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_brands_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_brands_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_no_results\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_default_args\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_exception\n============================== 31 errors in 0.10s ==============================\n",
        "stderr": "",
        "returncode": 1
      }
    },
    {
      "filepath": "app/utils/config.py",
      "coverage": 86.36,
      "test_generated": true,
      "test_saved": true,
      "test_result": {
        "success": false,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.11.13, pytest-7.4.3, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.11.13/x64/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/work/ai-product-qa/ai-product-qa\nplugins: anyio-4.9.0, cov-4.1.0, asyncio-0.23.6\nasyncio: mode=Mode.STRICT\ncollecting ... collected 10 items\n\ntests/test_utils/config.py::TestSettings::test_settings_init_success_with_all_variables PASSED [ 10%]\ntests/test_utils/config.py::TestSettings::test_settings_init_success_with_defaults PASSED [ 20%]\ntests/test_utils/config.py::TestSettings::test_settings_init_raises_error_on_missing_google_api_key FAILED [ 30%]\ntests/test_utils/config.py::TestSettings::test_settings_init_raises_error_on_placeholder_google_api_key PASSED [ 40%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_get_settings_returns_settings_instance PASSED [ 50%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_get_settings_uses_lru_cache PASSED [ 60%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_is_initialized_correctly PASSED [ 70%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_fails_on_missing_key_at_import FAILED [ 80%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_fails_on_placeholder_key_at_import FAILED [ 90%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_get_settings_cache_clear_functionality PASSED [100%]\n\n=================================== FAILURES ===================================\n____ TestSettings.test_settings_init_raises_error_on_missing_google_api_key ____\ntests/test_utils/config.py:98: in test_settings_init_raises_error_on_missing_google_api_key\n    assert \"GOOGLE_API_KEY must be set in .env file\" in str(excinfo.value)\nE   AssertionError: assert 'GOOGLE_API_KEY must be set in .env file' in '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing'\nE    +  where '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing' = str(1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing)\nE    +    where 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing = <ExceptionInfo 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing tblen=6>.value\n_ TestGetSettingsAndGlobal.test_global_settings_fails_on_missing_key_at_import _\ntests/test_utils/config.py:176: in test_global_settings_fails_on_missing_key_at_import\n    with pytest.raises(ValueError) as excinfo:\nE   Failed: DID NOT RAISE <class 'ValueError'>\n_ TestGetSettingsAndGlobal.test_global_settings_fails_on_placeholder_key_at_import _\ntests/test_utils/config.py:192: in test_global_settings_fails_on_placeholder_key_at_import\n    with pytest.raises(ValueError) as excinfo:\nE   Failed: DID NOT RAISE <class 'ValueError'>\n=============================== warnings summary ===============================\ntests/test_utils/config.py::TestSettings::test_settings_init_success_with_all_variables\ntests/test_utils/config.py::TestSettings::test_settings_init_success_with_defaults\ntests/test_utils/config.py::TestSettings::test_settings_init_raises_error_on_missing_google_api_key\ntests/test_utils/config.py::TestSettings::test_settings_init_raises_error_on_placeholder_google_api_key\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_get_settings_returns_settings_instance\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_get_settings_uses_lru_cache\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_is_initialized_correctly\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_get_settings_cache_clear_functionality\n  /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/\n    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_utils/config.py::TestSettings::test_settings_init_raises_error_on_missing_google_api_key - AssertionError: assert 'GOOGLE_API_KEY must be set in .env file' in '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing'\n +  where '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing' = str(1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing)\n +    where 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing = <ExceptionInfo 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing tblen=6>.value\nFAILED tests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_fails_on_missing_key_at_import - Failed: DID NOT RAISE <class 'ValueError'>\nFAILED tests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_fails_on_placeholder_key_at_import - Failed: DID NOT RAISE <class 'ValueError'>\n=================== 3 failed, 7 passed, 8 warnings in 0.15s ====================\n",
        "stderr": "",
        "returncode": 1
      }
    }
  ],
  "success_count": 0,
  "error_count": 4
}