{
  "processed_files": [
    {
      "filepath": "app/services/ai_service.py",
      "coverage": 4.839,
      "test_generated": true,
      "test_saved": true,
      "test_result": {
        "success": false,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.11.13, pytest-7.4.3, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.11.13/x64/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/work/ai-product-qa/ai-product-qa\nplugins: anyio-4.9.0, cov-4.1.0, asyncio-0.23.6\nasyncio: mode=Mode.STRICT\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________ ERROR collecting tests/test_services/ai_service.py ______________\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/runner.py:341: in from_call\n    result: Optional[TResult] = func()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/runner.py:372: in <lambda>\n    call = CallInfo.from_call(lambda: list(collector.collect()), \"collect\")\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pytest_asyncio/plugin.py:640: in _patched_collect\n    module = collector.obj\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/python.py:310: in obj\n    self._obj = obj = self._getobj()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/python.py:528: in _getobj\n    return self._importtestmodule()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/python.py:617: in _importtestmodule\n    mod = import_path(self.path, mode=importmode, root=self.config.rootpath)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/pathlib.py:567: in import_path\n    importlib.import_module(module_name)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1204: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1176: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:690: in _load_unlocked\n    ???\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/test_services/ai_service.py:12: in <module>\n    from app.services.ai_service import AIService\napp/services/ai_service.py:3: in <module>\n    from app.utils.config import get_settings\napp/utils/config.py:30: in <module>\n    settings = get_settings()\napp/utils/config.py:28: in get_settings\n    return Settings()\napp/utils/config.py:21: in __init__\n    super().__init__(**kwargs)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic_settings/main.py:176: in __init__\n    super().__init__(\nE   pydantic_core._pydantic_core.ValidationError: 1 validation error for Settings\nE   GOOGLE_API_KEY\nE     Field required [type=missing, input_value={}, input_type=dict]\nE       For further information visit https://errors.pydantic.dev/2.11/v/missing\n=============================== warnings summary ===============================\n../../../../../opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/_internal/_config.py:323\n  /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/\n    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_services/ai_service.py - pydantic_core._pydantic_core.ValidationError: 1 validation error for Settings\nGOOGLE_API_KEY\n  Field required [type=missing, input_value={}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n========================= 1 warning, 1 error in 0.76s ==========================\n",
        "stderr": "",
        "returncode": 2
      }
    },
    {
      "filepath": "app/services/local_product_service.py",
      "coverage": 11.540000000000001,
      "test_generated": true,
      "test_saved": true,
      "test_result": {
        "success": false,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.11.13, pytest-7.4.3, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.11.13/x64/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/work/ai-product-qa/ai-product-qa\nplugins: anyio-4.9.0, cov-4.1.0, asyncio-0.23.6\nasyncio: mode=Mode.STRICT\ncollecting ... collected 97 items\n\ntests/test_services/local_product_service.py::test_init_success PASSED   [  1%]\ntests/test_services/local_product_service.py::test_load_local_products_file_not_found FAILED [  2%]\ntests/test_services/local_product_service.py::test_load_local_products_valid_json_utf8 FAILED [  3%]\ntests/test_services/local_product_service.py::test_load_local_products_valid_json_utf16le_with_bom FAILED [  4%]\ntests/test_services/local_product_service.py::test_load_local_products_valid_json_utf8_sig_succeeds_after_utf8_fails FAILED [  5%]\ntests/test_services/local_product_service.py::test_load_local_products_valid_json_latin1_succeeds_after_others_fail FAILED [  6%]\ntests/test_services/local_product_service.py::test_load_local_products_valid_json_cp1252_succeeds_after_others_fail FAILED [  7%]\ntests/test_services/local_product_service.py::test_load_local_products_invalid_json_all_encodings_fail FAILED [  8%]\ntests/test_services/local_product_service.py::test_load_local_products_empty_file_content FAILED [  9%]\ntests/test_services/local_product_service.py::test_load_local_products_unicode_decode_error_all_encodings_fail FAILED [ 10%]\ntests/test_services/local_product_service.py::test_load_local_products_generic_exception FAILED [ 11%]\ntests/test_services/local_product_service.py::test_load_local_products_empty_products_list_in_json FAILED [ 12%]\ntests/test_services/local_product_service.py::test_load_local_products_json_missing_products_key FAILED [ 13%]\ntests/test_services/local_product_service.py::test_load_local_products_json_products_key_not_list FAILED [ 14%]\ntests/test_services/local_product_service.py::test_load_local_products_transformation_minimal_fields PASSED [ 15%]\ntests/test_services/local_product_service.py::test_load_local_products_transformation_with_extra_spec_fields FAILED [ 16%]\ntests/test_services/local_product_service.py::test_load_local_products_transformation_product_not_dict_causes_error FAILED [ 17%]\ntests/test_services/local_product_service.py::test_load_local_products_first_encoding_succeeds_others_not_tried FAILED [ 18%]\ntests/test_services/local_product_service.py::test_get_fallback_products PASSED [ 19%]\ntests/test_services/local_product_service.py::test_search_products_basic_keyword_match PASSED [ 20%]\ntests/test_services/local_product_service.py::test_search_products_case_insensitivity PASSED [ 21%]\ntests/test_services/local_product_service.py::test_search_products_no_match PASSED [ 22%]\ntests/test_services/local_product_service.py::test_search_products_with_limit PASSED [ 23%]\ntests/test_services/local_product_service.py::test_search_products_limit_zero PASSED [ 24%]\ntests/test_services/local_product_service.py::test_search_products_keyword_in_category_brand_specs PASSED [ 25%]\ntests/test_services/local_product_service.py::test_search_products_with_no_specs_field FAILED [ 26%]\ntests/test_services/local_product_service.py::test_search_products_price_extraction_juta FAILED [ 27%]\ntests/test_services/local_product_service.py::test_search_products_price_extraction_ribu PASSED [ 28%]\ntests/test_services/local_product_service.py::test_search_products_price_extraction_rp PASSED [ 29%]\ntests/test_services/local_product_service.py::test_search_products_price_extraction_k_m PASSED [ 30%]\ntests/test_services/local_product_service.py::test_search_products_price_extraction_budget_keyword FAILED [ 31%]\ntests/test_services/local_product_service.py::test_search_products_price_and_keyword_combined_without_budget_keyword FAILED [ 32%]\ntests/test_services/local_product_service.py::test_search_products_relevance_sorting_exact_match PASSED [ 34%]\ntests/test_services/local_product_service.py::test_search_products_relevance_sorting_budget_preference PASSED [ 35%]\ntests/test_services/local_product_service.py::test_search_products_empty_keyword PASSED [ 36%]\ntests/test_services/local_product_service.py::test_search_products_error_handling FAILED [ 37%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_juta FAILED [ 38%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_ribu PASSED [ 39%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_rp FAILED [ 40%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_k_m FAILED [ 41%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_budget_keywords PASSED [ 42%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_no_match PASSED [ 43%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_multiple_patterns_first_match_wins PASSED [ 44%]\ntests/test_services/local_product_service.py::test_extract_price_from_keyword_error_handling PASSED [ 45%]\ntests/test_services/local_product_service.py::test_get_product_details_found PASSED [ 46%]\ntests/test_services/local_product_service.py::test_get_product_details_not_found PASSED [ 47%]\ntests/test_services/local_product_service.py::test_get_product_details_empty_products_list PASSED [ 48%]\ntests/test_services/local_product_service.py::test_get_product_details_error_handling FAILED [ 49%]\ntests/test_services/local_product_service.py::test_get_categories PASSED [ 50%]\ntests/test_services/local_product_service.py::test_get_categories_empty_products_list PASSED [ 51%]\ntests/test_services/local_product_service.py::test_get_categories_with_missing_category_key PASSED [ 52%]\ntests/test_services/local_product_service.py::test_get_brands FAILED     [ 53%]\ntests/test_services/local_product_service.py::test_get_brands_empty_products_list PASSED [ 54%]\ntests/test_services/local_product_service.py::test_get_brands_with_missing_brand_key PASSED [ 55%]\ntests/test_services/local_product_service.py::test_get_products_by_category_found PASSED [ 56%]\ntests/test_services/local_product_service.py::test_get_products_by_category_case_insensitivity PASSED [ 57%]\ntests/test_services/local_product_service.py::test_get_products_by_category_not_found PASSED [ 58%]\ntests/test_services/local_product_service.py::test_get_products_by_category_empty_products_list PASSED [ 59%]\ntests/test_services/local_product_service.py::test_get_products_by_category_error_handling FAILED [ 60%]\ntests/test_services/local_product_service.py::test_get_products_by_brand_found PASSED [ 61%]\ntests/test_services/local_product_service.py::test_get_products_by_brand_case_insensitivity PASSED [ 62%]\ntests/test_services/local_product_service.py::test_get_products_by_brand_not_found PASSED [ 63%]\ntests/test_services/local_product_service.py::test_get_products_by_brand_empty_products_list PASSED [ 64%]\ntests/test_services/local_product_service.py::test_get_products_by_brand_error_handling FAILED [ 65%]\ntests/test_services/local_product_service.py::test_get_top_rated_products PASSED [ 67%]\ntests/test_services/local_product_service.py::test_get_top_rated_products_limit_greater_than_available PASSED [ 68%]\ntests/test_services/local_product_service.py::test_get_top_rated_products_limit_zero PASSED [ 69%]\ntests/test_services/local_product_service.py::test_get_top_rated_products_empty_products_list PASSED [ 70%]\ntests/test_services/local_product_service.py::test_get_top_rated_products_with_missing_rating_key PASSED [ 71%]\ntests/test_services/local_product_service.py::test_get_top_rated_products_error_handling FAILED [ 72%]\ntests/test_services/local_product_service.py::test_get_best_selling_products PASSED [ 73%]\ntests/test_services/local_product_service.py::test_get_best_selling_products_limit_greater_than_available PASSED [ 74%]\ntests/test_services/local_product_service.py::test_get_best_selling_products_limit_zero PASSED [ 75%]\ntests/test_services/local_product_service.py::test_get_best_selling_products_empty_products_list PASSED [ 76%]\ntests/test_services/local_product_service.py::test_get_best_selling_products_with_missing_sold_key PASSED [ 77%]\ntests/test_services/local_product_service.py::test_get_best_selling_products_error_handling FAILED [ 78%]\ntests/test_services/local_product_service.py::test_get_products PASSED   [ 79%]\ntests/test_services/local_product_service.py::test_get_products_limit_greater_than_available PASSED [ 80%]\ntests/test_services/local_product_service.py::test_get_products_limit_zero PASSED [ 81%]\ntests/test_services/local_product_service.py::test_get_products_empty_products_list PASSED [ 82%]\ntests/test_services/local_product_service.py::test_get_products_error_handling FAILED [ 83%]\ntests/test_services/local_product_service.py::test_smart_search_products_best_request_general PASSED [ 84%]\ntests/test_services/local_product_service.py::test_smart_search_products_best_request_english_keyword PASSED [ 85%]\ntests/test_services/local_product_service.py::test_smart_search_products_best_request_specific_category_found PASSED [ 86%]\ntests/test_services/local_product_service.py::test_smart_search_products_best_request_specific_category_not_found_fallback PASSED [ 87%]\ntests/test_services/local_product_service.py::test_smart_search_products_all_criteria_match FAILED [ 88%]\ntests/test_services/local_product_service.py::test_smart_search_products_no_exact_match_fallback_to_category PASSED [ 89%]\ntests/test_services/local_product_service.py::test_smart_search_products_no_category_match_fallback_to_budget PASSED [ 90%]\ntests/test_services/local_product_service.py::test_smart_search_products_no_match_all_fallbacks_popular FAILED [ 91%]\ntests/test_services/local_product_service.py::test_smart_search_products_empty_keyword_only_category PASSED [ 92%]\ntests/test_services/local_product_service.py::test_smart_search_products_empty_keyword_only_max_price FAILED [ 93%]\ntests/test_services/local_product_service.py::test_smart_search_products_empty_all_filters PASSED [ 94%]\ntests/test_services/local_product_service.py::test_smart_search_products_keyword_none PASSED [ 95%]\ntests/test_services/local_product_service.py::test_smart_search_products_default_limit FAILED [ 96%]\ntests/test_services/local_product_service.py::test_smart_search_products_limit_zero PASSED [ 97%]\ntests/test_services/local_product_service.py::test_smart_search_products_negative_limit FAILED [ 98%]\ntests/test_services/local_product_service.py::test_smart_search_products_no_products_loaded PASSED [100%]\n\n=================================== FAILURES ===================================\n___________________ test_load_local_products_file_not_found ____________________\ntests/test_services/local_product_service.py:246: in test_load_local_products_file_not_found\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 2 times.\nE   Calls: [call(\"Error loading products from JSON file: [Errno 2] No such file or directory: 'MagicMock/Path().parent.parent.parent.__truediv__().__truediv__()/140155781014352'\"),\nE    call(\"Error loading products from JSON file: [Errno 2] No such file or directory: 'MagicMock/Path().parent.parent.parent.__truediv__().__truediv__()/140155781014352'\")].\n___________________ test_load_local_products_valid_json_utf8 ___________________\ntests/test_services/local_product_service.py:272: in test_load_local_products_valid_json_utf8\n    assert products == TRANSFORMED_MOCK_PRODUCTS_DATA\nE   AssertionError: assert [{'availabili...R', ...}, ...] == [{'availabili...R', ...}, ...]\nE     At index 0 diff: {'id': 'prod1', 'name': 'Product A', 'category': 'Category1', 'brand': 'BrandX', 'price': 100000, 'currency': 'IDR', 'description': 'Description A. A very good product.', 'specifications': {'rating': 4.5, 'sold': 500, 'stock': 0, 'condition': 'Baru', 'shop_location': 'Indonesia', 'shop_name': 'BrandX Store', 'stock_count': 100, 'extra_spec': 'value1'}, 'availability': 'in_stock', 'reviews_count': 10, 'images': ['https://example.com/prod1.jpg'], 'url': 'https://shopee.co.id/prod1'} != {'id': 'prod1', 'name': 'Product A', 'category': 'Category1', 'brand': 'BrandX', 'price': 100000, 'currency': 'IDR', 'description': 'Description A. A very good product.', 'specifications': {'rating': 4.5, 'sold': 1000, 'stock': 100, 'condition': 'Baru', 'shop_location': 'Indonesia', 'shop_name': 'BrandX Store', 'extra_spec': 'value1'}, 'availability': 'in_stock', 'reviews_count': 10, 'images': ['https://example.com/prod1.jpg'], 'url': 'https://shopee.co.id/prod1'}\nE     Full diff:\nE       [\nE        {'availability': 'in_stock',\nE         'brand': 'BrandX',\nE         'category': 'Category1',\nE         'currency': 'IDR',\nE         'description': 'Description A. A very good product.',\nE         'id': 'prod1',\nE         'images': ['https://example.com/prod1.jpg'],\nE         'name': 'Product A',\nE         'price': 100000,\nE         'reviews_count': 10,\nE         'specifications': {'condition': 'Baru',\nE                            'extra_spec': 'value1',\nE                            'rating': 4.5,\nE                            'shop_location': 'Indonesia',\nE                            'shop_name': 'BrandX Store',\nE     -                      'sold': 1000,\nE     ?                              ^^\nE     +                      'sold': 500,\nE     ?                              ^\nE     -                      'stock': 100},\nE     ?                               - --\nE     +                      'stock': 0,\nE     +                      'stock_count': 100},\nE         'url': 'https://shopee.co.id/prod1'},\nE        {'availability': 'out_of_stock',\nE         'brand': 'BrandY',\nE         'category': 'Category2',\nE         'currency': 'IDR',\nE         'description': 'Description B, also Product A related. A moderate product.',\nE         'id': 'prod2',\nE         'images': ['https://example.com/prod2.jpg'],\nE         'name': 'Product B',\nE         'price': 200000,\nE         'reviews_count': 5,\nE         'specifications': {'condition': 'Baru',\nE                            'rating': 3.8,\nE                            'shop_location': 'Indonesia',\nE                            'shop_name': 'BrandY Store',\nE     -                      'sold': 1000,\nE     ?                              ^^\nE     +                      'sold': 300,\nE     ?                              ^\nE     -                      'stock': 50},\nE     ?                               - -\nE     +                      'stock': 0,\nE     +                      'stock_count': 50},\nE         'url': 'https://shopee.co.id/prod2'},\nE        {'availability': 'in_stock',\nE         'brand': 'BrandX',\nE         'category': 'Category1',\nE         'currency': 'IDR',\nE         'description': 'Cheapest product, high quality. Very good.',\nE         'id': 'prod3',\nE         'images': ['https://example.com/prod3.jpg'],\nE         'name': 'Product C',\nE         'price': 50000,\nE         'reviews_count': 20,\nE         'specifications': {'condition': 'Baru',\nE                            'rating': 4.9,\nE                            'shop_location': 'Indonesia',\nE                            'shop_name': 'BrandX Store',\nE     -                      'sold': 1000,\nE     ?                               ^\nE     +                      'sold': 1200,\nE     ?                               ^\nE     -                      'stock': 200},\nE     ?                               - --\nE     +                      'stock': 0,\nE     +                      'stock_count': 200},\nE         'url': 'https://shopee.co.id/prod3'},\nE        {'availability': 'in_stock',\nE         'brand': 'BrandZ',\nE         'category': 'Category3',\nE         'currency': 'IDR',\nE         'description': 'Expensive gadget. This is a very pricy item.',\nE         'id': 'prod4',\nE         'images': ['https://example.com/prod4.jpg'],\nE         'name': 'Product D',\nE         'price': 5000000,\nE         'reviews_count': 2,\nE         'specifications': {'condition': 'Baru',\nE                            'rating': 4.0,\nE                            'shop_location': 'Indonesia',\nE                            'shop_name': 'BrandZ Store',\nE     -                      'sold': 1000,\nE     ?                                 -\nE     +                      'sold': 100,\nE     -                      'stock': 10},\nE     ?                               - -\nE     +                      'stock': 0,\nE     +                      'stock_count': 10},\nE         'url': 'https://shopee.co.id/prod4'},\nE        {'availability': 'in_stock',\nE         'brand': 'BrandX',\nE         'category': 'Category1',\nE         'currency': 'IDR',\nE         'description': 'Best seller in Category1. Popular choice.',\nE         'id': 'prod5',\nE         'images': ['https://example.com/prod5.jpg'],\nE         'name': 'Product E (Best Seller)',\nE         'price': 150000,\nE         'reviews_count': 150,\nE         'specifications': {'condition': 'Baru',\nE                            'rating': 4.6,\nE                            'shop_location': 'Indonesia',\nE                            'shop_name': 'BrandX Store',\nE     -                      'sold': 1000,\nE     +                      'sold': 15000,\nE     ?                               +\nE     -                      'stock': 1000},\nE     ?                               - ---\nE     +                      'stock': 0,\nE     +                      'stock_count': 1000},\nE         'url': 'https://shopee.co.id/prod5'},\nE        {'availability': 'in_stock',\nE         'brand': 'BrandY',\nE         'category': 'Category2',\nE         'currency': 'IDR',\nE         'description': 'A budget friendly product. Very affordable.',\nE         'id': 'prod6',\nE         'images': ['https://example.com/prod6.jpg'],\nE         'name': 'Product F (Budget)',\nE         'price': 4000000,\nE         'reviews_count': 1,\nE         'specifications': {'condition': 'Baru',\nE                            'rating': 3.0,\nE                            'shop_location': 'Indonesia',\nE                            'shop_name': 'BrandY Store',\nE     -                      'sold': 1000,\nE     ?                              ^^^\nE     +                      'sold': 50,\nE     ?                              ^\nE     -                      'stock': 20},\nE     ?                               - -\nE     +                      'stock': 0,\nE     +                      'stock_count': 20},\nE         'url': 'https://shopee.co.id/prod6'},\nE        {'availability': 'in_stock',\nE         'brand': '',\nE         'category': '',\nE         'currency': 'IDR',\nE         'description': 'This product has minimal details.',\nE         'id': 'prod7',\nE         'images': ['https://example.com/prod7.jpg'],\nE         'name': 'Minimal Product',\nE         'price': 0,\nE         'reviews_count': 0,\nE         'specifications': {'condition': 'Baru',\nE                            'rating': 0,\nE                            'shop_location': 'Indonesia',\nE                            'shop_name': 'Unknown Store',\nE                            'sold': 1000,\nE                            'stock': 0},\nE         'url': 'https://shopee.co.id/prod7'},\nE        {'availability': 'in_stock',\nE         'brand': '',\nE         'category': 'Electronics',\nE         'currency': 'IDR',\nE         'description': '',\nE         'id': 'prod8',\nE         'images': ['https://example.com/prod8.jpg'],\nE         'name': 'Custom Spec Product',\nE         'price': 750000,\nE         'reviews_count': 0,\nE         'specifications': {'condition': 'Baru',\nE                            'custom_field': 'custom_value',\nE                            'rating': 4.2,\nE                            'shop_location': 'Indonesia',\nE                            'shop_name': 'Unknown Store',\nE                            'sold': 1000,\nE     -                      'stock': 70},\nE     ?                               - -\nE     +                      'stock': 0,\nE     +                      'stock_count': 70},\nE         'url': 'https://shopee.co.id/prod8'},\nE        {'availability': 'in_stock',\nE         'brand': 'BrandX',\nE         'category': 'Category1',\nE         'currency': 'IDR',\nE         'description': 'This product explicitly lacks a specifications dictionary.',\nE         'id': 'prod9',\nE         'images': ['https://example.com/prod9.jpg'],\nE         'name': 'Product Without Specs',\nE         'price': 250000,\nE         'reviews_count': 0,\nE         'specifications': {'condition': 'Baru',\nE                            'rating': 0,\nE                            'shop_location': 'Indonesia',\nE                            'shop_name': 'BrandX Store',\nE                            'sold': 1000,\nE                            'stock': 0},\nE         'url': 'https://shopee.co.id/prod9'},\nE       ]\n_____________ test_load_local_products_valid_json_utf16le_with_bom _____________\ntests/test_services/local_product_service.py:316: in test_load_local_products_valid_json_utf16le_with_bom\n    assert len(products) == len(TRANSFORMED_MOCK_PRODUCTS_DATA)\nE   AssertionError: assert 8 == 9\nE    +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\nE    +  and   9 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\n____ test_load_local_products_valid_json_utf8_sig_succeeds_after_utf8_fails ____\ntests/test_services/local_product_service.py:358: in test_load_local_products_valid_json_utf8_sig_succeeds_after_utf8_fails\n    assert len(products) == len(TRANSFORMED_MOCK_PRODUCTS_DATA)\nE   AssertionError: assert 8 == 9\nE    +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\nE    +  and   9 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\n____ test_load_local_products_valid_json_latin1_succeeds_after_others_fail _____\ntests/test_services/local_product_service.py:403: in test_load_local_products_valid_json_latin1_succeeds_after_others_fail\n    assert len(products) == len(TRANSFORMED_MOCK_PRODUCTS_DATA)\nE   AssertionError: assert 8 == 9\nE    +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\nE    +  and   9 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\n____ test_load_local_products_valid_json_cp1252_succeeds_after_others_fail _____\ntests/test_services/local_product_service.py:443: in test_load_local_products_valid_json_cp1252_succeeds_after_others_fail\n    assert len(products) == len(TRANSFORMED_MOCK_PRODUCTS_DATA)\nE   AssertionError: assert 8 == 9\nE    +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\nE    +  and   9 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\n___________ test_load_local_products_invalid_json_all_encodings_fail ___________\ntests/test_services/local_product_service.py:485: in test_load_local_products_invalid_json_all_encodings_fail\n    mock_logger.warning.assert_any_call(f\"Failed to load with {encoding} encoding: json.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\")\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1010: in assert_any_call\n    raise AssertionError(\nE   AssertionError: warning('Failed to load with utf-16-le encoding: json.JSONDecodeError: Expecting value: line 1 column 1 (char 0)') call not found\n_________________ test_load_local_products_empty_file_content __________________\ntests/test_services/local_product_service.py:519: in test_load_local_products_empty_file_content\n    mock_logger.warning.assert_any_call(\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1010: in assert_any_call\n    raise AssertionError(\nE   AssertionError: warning('Failed to load with utf-16-le encoding: json.JSONDecodeError: Expecting value: line 1 column 1 (char 0)') call not found\n_______ test_load_local_products_unicode_decode_error_all_encodings_fail _______\ntests/test_services/local_product_service.py:554: in test_load_local_products_unicode_decode_error_all_encodings_fail\n    mock_logger.warning.assert_any_call(f\"Failed to load with {encoding} encoding: mockcodec: mock reason\")\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1010: in assert_any_call\n    raise AssertionError(\nE   AssertionError: warning('Failed to load with utf-16-le encoding: mockcodec: mock reason') call not found\n__________________ test_load_local_products_generic_exception __________________\ntests/test_services/local_product_service.py:580: in test_load_local_products_generic_exception\n    mock_fallback.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected '_get_fallback_products' to have been called once. Called 2 times.\nE   Calls: [call(), call().__len__(), call()].\n_____________ test_load_local_products_empty_products_list_in_json _____________\ntests/test_services/local_product_service.py:602: in test_load_local_products_empty_products_list_in_json\n    mock_logger.info.assert_any_call(\"Successfully loaded 0 products from JSON file using utf-8 encoding\")\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1010: in assert_any_call\n    raise AssertionError(\nE   AssertionError: info('Successfully loaded 0 products from JSON file using utf-8 encoding') call not found\n______________ test_load_local_products_json_missing_products_key ______________\ntests/test_services/local_product_service.py:623: in test_load_local_products_json_missing_products_key\n    mock_logger.info.assert_any_call(\"Successfully loaded 0 products from JSON file using utf-8 encoding\")\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1010: in assert_any_call\n    raise AssertionError(\nE   AssertionError: info('Successfully loaded 0 products from JSON file using utf-8 encoding') call not found\n_____________ test_load_local_products_json_products_key_not_list ______________\ntests/test_services/local_product_service.py:644: in test_load_local_products_json_products_key_not_list\n    assert len(products) == 0 # Should fallback to empty list due to .get('products', [])\nE   AssertionError: assert 8 == 0\nE    +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\n________ test_load_local_products_transformation_with_extra_spec_fields ________\ntests/test_services/local_product_service.py:735: in test_load_local_products_transformation_with_extra_spec_fields\n    assert products[0]['specifications'] == expected_transformed_spec\nE   AssertionError: assert {'another_cus...ng': 4.2, ...} == {'another_cus...ng': 4.2, ...}\nE     Omitting 7 identical items, use -vv to show\nE     Differing items:\nE     {'stock': 0} != {'stock': 70}\nE     Left contains 1 more item:\nE     {'stock_count': 70}\nE     Full diff:\nE       {\nE        'another_custom': True,\nE        'condition': 'Baru',\nE        'custom_field': 'custom_value',\nE        'rating': 4.2,\nE        'shop_location': 'Indonesia',\nE        'shop_name': 'CustomBrand Store',\nE        'sold': 1000,\nE     -  'stock': 70,\nE     ?           -\nE     +  'stock': 0,\nE     +  'stock_count': 70,\nE       }\n____ test_load_local_products_transformation_product_not_dict_causes_error _____\ntests/test_services/local_product_service.py:763: in test_load_local_products_transformation_product_not_dict_causes_error\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 2 times.\nE   Calls: [call(\"Error loading products from JSON file: 'str' object has no attribute 'get'\"),\nE    call(\"Error loading products from JSON file: 'str' object has no attribute 'get'\")].\n______ test_load_local_products_first_encoding_succeeds_others_not_tried _______\ntests/test_services/local_product_service.py:799: in test_load_local_products_first_encoding_succeeds_others_not_tried\n    assert len(products) == len(TRANSFORMED_MOCK_PRODUCTS_DATA)\nE   AssertionError: assert 8 == 9\nE    +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\nE    +  and   9 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\n___________________ test_search_products_with_no_specs_field ___________________\ntests/test_services/local_product_service.py:896: in test_search_products_with_no_specs_field\n    assert len(results) == 1\nE   assert 0 == 1\nE    +  where 0 = len([])\n__________________ test_search_products_price_extraction_juta __________________\ntests/test_services/local_product_service.py:916: in test_search_products_price_extraction_juta\n    assert results[0]['id'] == 'prod1' # \"Product A\" match\nE   AssertionError: assert 'prod7' == 'prod1'\nE     - prod1\nE     ?     ^\nE     + prod7\nE     ?     ^\n_____________ test_search_products_price_extraction_budget_keyword _____________\ntests/test_services/local_product_service.py:984: in test_search_products_price_extraction_budget_keyword\n    assert 'prod4' in top_ids\nE   AssertionError: assert 'prod4' in {'prod1', 'prod3', 'prod7'}\n____ test_search_products_price_and_keyword_combined_without_budget_keyword ____\ntests/test_services/local_product_service.py:996: in test_search_products_price_and_keyword_combined_without_budget_keyword\n    assert len(results) == 2 # Only prod1 (price 100k) and prod7 (price 0) should match price\nE   AssertionError: assert 3 == 2\nE    +  where 3 = len([{'availability': 'in_stock', 'brand': '', 'category': '', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}])\n_____________________ test_search_products_error_handling ______________________\ntests/test_services/local_product_service.py:1066: in test_search_products_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n_____________________ test_extract_price_from_keyword_juta _____________________\ntests/test_services/local_product_service.py:1073: in test_extract_price_from_keyword_juta\n    assert service._extract_price_from_keyword(\"5.5 juta\") is None # Only integer part extracted by regex\nE   AssertionError: assert 5000000 is None\nE    +  where 5000000 = <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e48a010>>('5.5 juta')\nE    +    where <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e48a010>> = <app.services.local_product_service.LocalProductService object at 0x7f788e48a010>._extract_price_from_keyword\n______________________ test_extract_price_from_keyword_rp ______________________\ntests/test_services/local_product_service.py:1086: in test_extract_price_from_keyword_rp\n    assert service._extract_price_from_keyword(\"RP. 500000\") == 500000 # Test with dot and different casing\nE   AssertionError: assert None == 500000\nE    +  where None = <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e4edf90>>('RP. 500000')\nE    +    where <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e4edf90>> = <app.services.local_product_service.LocalProductService object at 0x7f788e4edf90>._extract_price_from_keyword\n_____________________ test_extract_price_from_keyword_k_m ______________________\ntests/test_services/local_product_service.py:1092: in test_extract_price_from_keyword_k_m\n    assert service._extract_price_from_keyword(\"2.5m\") is None # Only integer part extracted by regex\nE   AssertionError: assert 5000000 is None\nE    +  where 5000000 = <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e4ef190>>('2.5m')\nE    +    where <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e4ef190>> = <app.services.local_product_service.LocalProductService object at 0x7f788e4ef190>._extract_price_from_keyword\n___________________ test_get_product_details_error_handling ____________________\ntests/test_services/local_product_service.py:1165: in test_get_product_details_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n_______________________________ test_get_brands ________________________________\ntests/test_services/local_product_service.py:1209: in test_get_brands\n    assert sorted(brands) == sorted(['BrandX', 'BrandY', 'BrandZ', 'CustomBrand', '']) # '' for prod7, prod8 missing brand\nE   AssertionError: assert ['', 'BrandX'...dY', 'BrandZ'] == ['', 'BrandX'...'CustomBrand']\nE     Right contains one more item: 'CustomBrand'\nE     Full diff:\nE     - ['', 'BrandX', 'BrandY', 'BrandZ', 'CustomBrand']\nE     ?                                  ---------------\nE     + ['', 'BrandX', 'BrandY', 'BrandZ']\n_________________ test_get_products_by_category_error_handling _________________\ntests/test_services/local_product_service.py:1285: in test_get_products_by_category_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n__________________ test_get_products_by_brand_error_handling ___________________\ntests/test_services/local_product_service.py:1334: in test_get_products_by_brand_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n__________________ test_get_top_rated_products_error_handling __________________\ntests/test_services/local_product_service.py:1410: in test_get_top_rated_products_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n________________ test_get_best_selling_products_error_handling _________________\ntests/test_services/local_product_service.py:1522: in test_get_best_selling_products_error_handling\n    mock_logger.error.assert_called_once()\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'error' to have been called once. Called 0 times.\n_______________________ test_get_products_error_handling _______________________\ntests/test_services/local_product_service.py:1570: in test_get_products_error_handling\n    assert products == []\nE   AssertionError: assert <MagicMock na...155759363216'> == []\nE     Full diff:\nE     - []\nE     + <MagicMock name='mock.__getitem__()' id='140155759363216'>\n________________ test_smart_search_products_all_criteria_match _________________\ntests/test_services/local_product_service.py:1634: in test_smart_search_products_all_criteria_match\n    assert len(products) == 2\nE   AssertionError: assert 1 == 2\nE    +  where 1 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}])\n__________ test_smart_search_products_no_match_all_fallbacks_popular ___________\ntests/test_services/local_product_service.py:1697: in test_smart_search_products_no_match_all_fallbacks_popular\n    assert len(products) == 2\nE   AssertionError: assert 1 == 2\nE    +  where 1 = len([{'availability': 'in_stock', 'brand': '', 'category': '', 'currency': 'IDR', ...}])\n___________ test_smart_search_products_empty_keyword_only_max_price ____________\ntests/test_services/local_product_service.py:1729: in test_smart_search_products_empty_keyword_only_max_price\n    assert products[0]['id'] == 'prod7'\nE   AssertionError: assert 'prod1' == 'prod7'\nE     - prod7\nE     ?     ^\nE     + prod1\nE     ?     ^\n___________________ test_smart_search_products_default_limit ___________________\ntests/test_services/local_product_service.py:1776: in test_smart_search_products_default_limit\n    assert actual_ids == expected_ids\nE   AssertionError: assert {'prod1', 'pr...od4', 'prod5'} == {'prod1', 'pr...od5', 'prod7'}\nE     Extra items in the left set:\nE     'prod4'\nE     Extra items in the right set:\nE     'prod7'\nE     Full diff:\nE     - {'prod2', 'prod1', 'prod7', 'prod5', 'prod3'}\nE     + {'prod2', 'prod4', 'prod3', 'prod1', 'prod5'}\n__________________ test_smart_search_products_negative_limit ___________________\ntests/test_services/local_product_service.py:1799: in test_smart_search_products_negative_limit\n    assert len(products) == 0\nE   AssertionError: assert 8 == 0\nE    +  where 8 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\n=========================== short test summary info ============================\nFAILED tests/test_services/local_product_service.py::test_load_local_products_file_not_found - AssertionError: Expected 'error' to have been called once. Called 2 times.\nCalls: [call(\"Error loading products from JSON file: [Errno 2] No such file or directory: 'MagicMock/Path().parent.parent.parent.__truediv__().__truediv__()/140155781014352'\"),\n call(\"Error loading products from JSON file: [Errno 2] No such file or directory: 'MagicMock/Path().parent.parent.parent.__truediv__().__truediv__()/140155781014352'\")].\nFAILED tests/test_services/local_product_service.py::test_load_local_products_valid_json_utf8 - AssertionError: assert [{'availabili...R', ...}, ...] == [{'availabili...R', ...}, ...]\n  At index 0 diff: {'id': 'prod1', 'name': 'Product A', 'category': 'Category1', 'brand': 'BrandX', 'price': 100000, 'currency': 'IDR', 'description': 'Description A. A very good product.', 'specifications': {'rating': 4.5, 'sold': 500, 'stock': 0, 'condition': 'Baru', 'shop_location': 'Indonesia', 'shop_name': 'BrandX Store', 'stock_count': 100, 'extra_spec': 'value1'}, 'availability': 'in_stock', 'reviews_count': 10, 'images': ['https://example.com/prod1.jpg'], 'url': 'https://shopee.co.id/prod1'} != {'id': 'prod1', 'name': 'Product A', 'category': 'Category1', 'brand': 'BrandX', 'price': 100000, 'currency': 'IDR', 'description': 'Description A. A very good product.', 'specifications': {'rating': 4.5, 'sold': 1000, 'stock': 100, 'condition': 'Baru', 'shop_location': 'Indonesia', 'shop_name': 'BrandX Store', 'extra_spec': 'value1'}, 'availability': 'in_stock', 'reviews_count': 10, 'images': ['https://example.com/prod1.jpg'], 'url': 'https://shopee.co.id/prod1'}\n  Full diff:\n    [\n     {'availability': 'in_stock',\n      'brand': 'BrandX',\n      'category': 'Category1',\n      'currency': 'IDR',\n      'description': 'Description A. A very good product.',\n      'id': 'prod1',\n      'images': ['https://example.com/prod1.jpg'],\n      'name': 'Product A',\n      'price': 100000,\n      'reviews_count': 10,\n      'specifications': {'condition': 'Baru',\n                         'extra_spec': 'value1',\n                         'rating': 4.5,\n                         'shop_location': 'Indonesia',\n                         'shop_name': 'BrandX Store',\n  -                      'sold': 1000,\n  ?                              ^^\n  +                      'sold': 500,\n  ?                              ^\n  -                      'stock': 100},\n  ?                               - --\n  +                      'stock': 0,\n  +                      'stock_count': 100},\n      'url': 'https://shopee.co.id/prod1'},\n     {'availability': 'out_of_stock',\n      'brand': 'BrandY',\n      'category': 'Category2',\n      'currency': 'IDR',\n      'description': 'Description B, also Product A related. A moderate product.',\n      'id': 'prod2',\n      'images': ['https://example.com/prod2.jpg'],\n      'name': 'Product B',\n      'price': 200000,\n      'reviews_count': 5,\n      'specifications': {'condition': 'Baru',\n                         'rating': 3.8,\n                         'shop_location': 'Indonesia',\n                         'shop_name': 'BrandY Store',\n  -                      'sold': 1000,\n  ?                              ^^\n  +                      'sold': 300,\n  ?                              ^\n  -                      'stock': 50},\n  ?                               - -\n  +                      'stock': 0,\n  +                      'stock_count': 50},\n      'url': 'https://shopee.co.id/prod2'},\n     {'availability': 'in_stock',\n      'brand': 'BrandX',\n      'category': 'Category1',\n      'currency': 'IDR',\n      'description': 'Cheapest product, high quality. Very good.',\n      'id': 'prod3',\n      'images': ['https://example.com/prod3.jpg'],\n      'name': 'Product C',\n      'price': 50000,\n      'reviews_count': 20,\n      'specifications': {'condition': 'Baru',\n                         'rating': 4.9,\n                         'shop_location': 'Indonesia',\n                         'shop_name': 'BrandX Store',\n  -                      'sold': 1000,\n  ?                               ^\n  +                      'sold': 1200,\n  ?                               ^\n  -                      'stock': 200},\n  ?                               - --\n  +                      'stock': 0,\n  +                      'stock_count': 200},\n      'url': 'https://shopee.co.id/prod3'},\n     {'availability': 'in_stock',\n      'brand': 'BrandZ',\n      'category': 'Category3',\n      'currency': 'IDR',\n      'description': 'Expensive gadget. This is a very pricy item.',\n      'id': 'prod4',\n      'images': ['https://example.com/prod4.jpg'],\n      'name': 'Product D',\n      'price': 5000000,\n      'reviews_count': 2,\n      'specifications': {'condition': 'Baru',\n                         'rating': 4.0,\n                         'shop_location': 'Indonesia',\n                         'shop_name': 'BrandZ Store',\n  -                      'sold': 1000,\n  ?                                 -\n  +                      'sold': 100,\n  -                      'stock': 10},\n  ?                               - -\n  +                      'stock': 0,\n  +                      'stock_count': 10},\n      'url': 'https://shopee.co.id/prod4'},\n     {'availability': 'in_stock',\n      'brand': 'BrandX',\n      'category': 'Category1',\n      'currency': 'IDR',\n      'description': 'Best seller in Category1. Popular choice.',\n      'id': 'prod5',\n      'images': ['https://example.com/prod5.jpg'],\n      'name': 'Product E (Best Seller)',\n      'price': 150000,\n      'reviews_count': 150,\n      'specifications': {'condition': 'Baru',\n                         'rating': 4.6,\n                         'shop_location': 'Indonesia',\n                         'shop_name': 'BrandX Store',\n  -                      'sold': 1000,\n  +                      'sold': 15000,\n  ?                               +\n  -                      'stock': 1000},\n  ?                               - ---\n  +                      'stock': 0,\n  +                      'stock_count': 1000},\n      'url': 'https://shopee.co.id/prod5'},\n     {'availability': 'in_stock',\n      'brand': 'BrandY',\n      'category': 'Category2',\n      'currency': 'IDR',\n      'description': 'A budget friendly product. Very affordable.',\n      'id': 'prod6',\n      'images': ['https://example.com/prod6.jpg'],\n      'name': 'Product F (Budget)',\n      'price': 4000000,\n      'reviews_count': 1,\n      'specifications': {'condition': 'Baru',\n                         'rating': 3.0,\n                         'shop_location': 'Indonesia',\n                         'shop_name': 'BrandY Store',\n  -                      'sold': 1000,\n  ?                              ^^^\n  +                      'sold': 50,\n  ?                              ^\n  -                      'stock': 20},\n  ?                               - -\n  +                      'stock': 0,\n  +                      'stock_count': 20},\n      'url': 'https://shopee.co.id/prod6'},\n     {'availability': 'in_stock',\n      'brand': '',\n      'category': '',\n      'currency': 'IDR',\n      'description': 'This product has minimal details.',\n      'id': 'prod7',\n      'images': ['https://example.com/prod7.jpg'],\n      'name': 'Minimal Product',\n      'price': 0,\n      'reviews_count': 0,\n      'specifications': {'condition': 'Baru',\n                         'rating': 0,\n                         'shop_location': 'Indonesia',\n                         'shop_name': 'Unknown Store',\n                         'sold': 1000,\n                         'stock': 0},\n      'url': 'https://shopee.co.id/prod7'},\n     {'availability': 'in_stock',\n      'brand': '',\n      'category': 'Electronics',\n      'currency': 'IDR',\n      'description': '',\n      'id': 'prod8',\n      'images': ['https://example.com/prod8.jpg'],\n      'name': 'Custom Spec Product',\n      'price': 750000,\n      'reviews_count': 0,\n      'specifications': {'condition': 'Baru',\n                         'custom_field': 'custom_value',\n                         'rating': 4.2,\n                         'shop_location': 'Indonesia',\n                         'shop_name': 'Unknown Store',\n                         'sold': 1000,\n  -                      'stock': 70},\n  ?                               - -\n  +                      'stock': 0,\n  +                      'stock_count': 70},\n      'url': 'https://shopee.co.id/prod8'},\n     {'availability': 'in_stock',\n      'brand': 'BrandX',\n      'category': 'Category1',\n      'currency': 'IDR',\n      'description': 'This product explicitly lacks a specifications dictionary.',\n      'id': 'prod9',\n      'images': ['https://example.com/prod9.jpg'],\n      'name': 'Product Without Specs',\n      'price': 250000,\n      'reviews_count': 0,\n      'specifications': {'condition': 'Baru',\n                         'rating': 0,\n                         'shop_location': 'Indonesia',\n                         'shop_name': 'BrandX Store',\n                         'sold': 1000,\n                         'stock': 0},\n      'url': 'https://shopee.co.id/prod9'},\n    ]\nFAILED tests/test_services/local_product_service.py::test_load_local_products_valid_json_utf16le_with_bom - AssertionError: assert 8 == 9\n +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\n +  and   9 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\nFAILED tests/test_services/local_product_service.py::test_load_local_products_valid_json_utf8_sig_succeeds_after_utf8_fails - AssertionError: assert 8 == 9\n +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\n +  and   9 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\nFAILED tests/test_services/local_product_service.py::test_load_local_products_valid_json_latin1_succeeds_after_others_fail - AssertionError: assert 8 == 9\n +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\n +  and   9 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\nFAILED tests/test_services/local_product_service.py::test_load_local_products_valid_json_cp1252_succeeds_after_others_fail - AssertionError: assert 8 == 9\n +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\n +  and   9 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\nFAILED tests/test_services/local_product_service.py::test_load_local_products_invalid_json_all_encodings_fail - AssertionError: warning('Failed to load with utf-16-le encoding: json.JSONDecodeError: Expecting value: line 1 column 1 (char 0)') call not found\nFAILED tests/test_services/local_product_service.py::test_load_local_products_empty_file_content - AssertionError: warning('Failed to load with utf-16-le encoding: json.JSONDecodeError: Expecting value: line 1 column 1 (char 0)') call not found\nFAILED tests/test_services/local_product_service.py::test_load_local_products_unicode_decode_error_all_encodings_fail - AssertionError: warning('Failed to load with utf-16-le encoding: mockcodec: mock reason') call not found\nFAILED tests/test_services/local_product_service.py::test_load_local_products_generic_exception - AssertionError: Expected '_get_fallback_products' to have been called once. Called 2 times.\nCalls: [call(), call().__len__(), call()].\nFAILED tests/test_services/local_product_service.py::test_load_local_products_empty_products_list_in_json - AssertionError: info('Successfully loaded 0 products from JSON file using utf-8 encoding') call not found\nFAILED tests/test_services/local_product_service.py::test_load_local_products_json_missing_products_key - AssertionError: info('Successfully loaded 0 products from JSON file using utf-8 encoding') call not found\nFAILED tests/test_services/local_product_service.py::test_load_local_products_json_products_key_not_list - AssertionError: assert 8 == 0\n +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\nFAILED tests/test_services/local_product_service.py::test_load_local_products_transformation_with_extra_spec_fields - AssertionError: assert {'another_cus...ng': 4.2, ...} == {'another_cus...ng': 4.2, ...}\n  Omitting 7 identical items, use -vv to show\n  Differing items:\n  {'stock': 0} != {'stock': 70}\n  Left contains 1 more item:\n  {'stock_count': 70}\n  Full diff:\n    {\n     'another_custom': True,\n     'condition': 'Baru',\n     'custom_field': 'custom_value',\n     'rating': 4.2,\n     'shop_location': 'Indonesia',\n     'shop_name': 'CustomBrand Store',\n     'sold': 1000,\n  -  'stock': 70,\n  ?           -\n  +  'stock': 0,\n  +  'stock_count': 70,\n    }\nFAILED tests/test_services/local_product_service.py::test_load_local_products_transformation_product_not_dict_causes_error - AssertionError: Expected 'error' to have been called once. Called 2 times.\nCalls: [call(\"Error loading products from JSON file: 'str' object has no attribute 'get'\"),\n call(\"Error loading products from JSON file: 'str' object has no attribute 'get'\")].\nFAILED tests/test_services/local_product_service.py::test_load_local_products_first_encoding_succeeds_others_not_tried - AssertionError: assert 8 == 9\n +  where 8 = len([{'brand': 'Apple', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'iPhone 15 Pro Max dengan chip A17 Pro, kamera 48MP, dan layar 6.7 inch Super Retina XDR. Dilengkapi dengan titanium design dan performa gaming yang luar biasa.', ...}, {'brand': 'Samsung', 'category': 'Smartphone', 'currency': 'IDR', 'description': 'Samsung Galaxy S24 Ultra dengan S Pen, kamera 200MP, dan AI features canggih. Dilengkapi dengan Snapdragon 8 Gen 3 dan layar AMOLED 6.8 inch.', ...}, {'brand': 'Apple', 'category': 'Laptop', 'currency': 'IDR', 'description': 'MacBook Pro dengan chip M3, layar 14 inch Liquid Retina XDR, dan performa tinggi untuk profesional. Cocok untuk video editing, programming, dan gaming.', ...}, {'brand': 'Apple', 'category': 'Audio', 'currency': 'IDR', 'description': 'AirPods Pro dengan Active Noise Cancellation dan Spatial Audio. Dilengkapi dengan chip H2 untuk performa audio yang lebih baik dan fitur Find My.', ...}, {'brand': 'Apple', 'category': 'Tablet', 'currency': 'IDR', 'description': 'iPad Air dengan chip M1, layar 10.9 inch Liquid Retina, dan Apple Pencil support. Cocok untuk kreativitas, note-taking, dan entertainment.', ...}, {'brand': 'ASUS', 'category': 'Laptop', 'currency': 'IDR', 'description': 'Laptop gaming ASUS ROG Strix G15 dengan RTX 4060, AMD Ryzen 7, dan layar 15.6 inch 144Hz. Dilengkapi dengan RGB keyboard dan cooling system yang powerful.', ...}, ...])\n +  and   9 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\nFAILED tests/test_services/local_product_service.py::test_search_products_with_no_specs_field - assert 0 == 1\n +  where 0 = len([])\nFAILED tests/test_services/local_product_service.py::test_search_products_price_extraction_juta - AssertionError: assert 'prod7' == 'prod1'\n  - prod1\n  ?     ^\n  + prod7\n  ?     ^\nFAILED tests/test_services/local_product_service.py::test_search_products_price_extraction_budget_keyword - AssertionError: assert 'prod4' in {'prod1', 'prod3', 'prod7'}\nFAILED tests/test_services/local_product_service.py::test_search_products_price_and_keyword_combined_without_budget_keyword - AssertionError: assert 3 == 2\n +  where 3 = len([{'availability': 'in_stock', 'brand': '', 'category': '', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}])\nFAILED tests/test_services/local_product_service.py::test_search_products_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_extract_price_from_keyword_juta - AssertionError: assert 5000000 is None\n +  where 5000000 = <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e48a010>>('5.5 juta')\n +    where <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e48a010>> = <app.services.local_product_service.LocalProductService object at 0x7f788e48a010>._extract_price_from_keyword\nFAILED tests/test_services/local_product_service.py::test_extract_price_from_keyword_rp - AssertionError: assert None == 500000\n +  where None = <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e4edf90>>('RP. 500000')\n +    where <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e4edf90>> = <app.services.local_product_service.LocalProductService object at 0x7f788e4edf90>._extract_price_from_keyword\nFAILED tests/test_services/local_product_service.py::test_extract_price_from_keyword_k_m - AssertionError: assert 5000000 is None\n +  where 5000000 = <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e4ef190>>('2.5m')\n +    where <bound method LocalProductService._extract_price_from_keyword of <app.services.local_product_service.LocalProductService object at 0x7f788e4ef190>> = <app.services.local_product_service.LocalProductService object at 0x7f788e4ef190>._extract_price_from_keyword\nFAILED tests/test_services/local_product_service.py::test_get_product_details_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_get_brands - AssertionError: assert ['', 'BrandX'...dY', 'BrandZ'] == ['', 'BrandX'...'CustomBrand']\n  Right contains one more item: 'CustomBrand'\n  Full diff:\n  - ['', 'BrandX', 'BrandY', 'BrandZ', 'CustomBrand']\n  ?                                  ---------------\n  + ['', 'BrandX', 'BrandY', 'BrandZ']\nFAILED tests/test_services/local_product_service.py::test_get_products_by_category_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_get_products_by_brand_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_get_top_rated_products_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_get_best_selling_products_error_handling - AssertionError: Expected 'error' to have been called once. Called 0 times.\nFAILED tests/test_services/local_product_service.py::test_get_products_error_handling - AssertionError: assert <MagicMock na...155759363216'> == []\n  Full diff:\n  - []\n  + <MagicMock name='mock.__getitem__()' id='140155759363216'>\nFAILED tests/test_services/local_product_service.py::test_smart_search_products_all_criteria_match - AssertionError: assert 1 == 2\n +  where 1 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}])\nFAILED tests/test_services/local_product_service.py::test_smart_search_products_no_match_all_fallbacks_popular - AssertionError: assert 1 == 2\n +  where 1 = len([{'availability': 'in_stock', 'brand': '', 'category': '', 'currency': 'IDR', ...}])\nFAILED tests/test_services/local_product_service.py::test_smart_search_products_empty_keyword_only_max_price - AssertionError: assert 'prod1' == 'prod7'\n  - prod7\n  ?     ^\n  + prod1\n  ?     ^\nFAILED tests/test_services/local_product_service.py::test_smart_search_products_default_limit - AssertionError: assert {'prod1', 'pr...od4', 'prod5'} == {'prod1', 'pr...od5', 'prod7'}\n  Extra items in the left set:\n  'prod4'\n  Extra items in the right set:\n  'prod7'\n  Full diff:\n  - {'prod2', 'prod1', 'prod7', 'prod5', 'prod3'}\n  + {'prod2', 'prod4', 'prod3', 'prod1', 'prod5'}\nFAILED tests/test_services/local_product_service.py::test_smart_search_products_negative_limit - AssertionError: assert 8 == 0\n +  where 8 = len([{'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'out_of_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandZ', 'category': 'Category3', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandX', 'category': 'Category1', 'currency': 'IDR', ...}, {'availability': 'in_stock', 'brand': 'BrandY', 'category': 'Category2', 'currency': 'IDR', ...}, ...])\n======================== 36 failed, 61 passed in 1.64s =========================\n",
        "stderr": "",
        "returncode": 1
      }
    },
    {
      "filepath": "app/services/product_data_service.py",
      "coverage": 20.73,
      "test_generated": true,
      "test_saved": true,
      "test_result": {
        "success": false,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.11.13, pytest-7.4.3, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.11.13/x64/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/work/ai-product-qa/ai-product-qa\nplugins: anyio-4.9.0, cov-4.1.0, asyncio-0.23.6\nasyncio: mode=Mode.STRICT\ncollecting ... collected 66 items\n\ntests/test_services/product_data_service.py::TestProductDataService::test_init ERROR [  1%]\ntests/test_services/product_data_service.py::TestProductDataService::test_search_products_success ERROR [  3%]\ntests/test_services/product_data_service.py::TestProductDataService::test_search_products_no_results ERROR [  4%]\ntests/test_services/product_data_service.py::TestProductDataService::test_search_products_exception ERROR [  6%]\ntests/test_services/product_data_service.py::TestProductDataService::test_search_products_zero_limit ERROR [  7%]\ntests/test_services/product_data_service.py::TestProductDataService::test_search_products_negative_limit ERROR [  9%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_with_search ERROR [ 10%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_with_category ERROR [ 12%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_no_filters ERROR [ 13%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_search_precedence ERROR [ 15%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_exception_fallback ERROR [ 16%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_with_category_exception_fallback ERROR [ 18%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_no_filters_exception_fallback ERROR [ 19%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_default_limit ERROR [ 21%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_exception_in_fallback ERROR [ 22%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_category_path_and_fallback_exception ERROR [ 24%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_no_filters_path_and_fallback_exception ERROR [ 25%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_categories_success ERROR [ 27%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_categories_empty ERROR [ 28%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_categories_exception ERROR [ 30%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_success ERROR [ 31%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_empty ERROR [ 33%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_zero_limit ERROR [ 34%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_negative_limit ERROR [ 36%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_exception ERROR [ 37%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_success ERROR [ 39%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_empty ERROR [ 40%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_zero_limit ERROR [ 42%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_negative_limit ERROR [ 43%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_exception ERROR [ 45%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_success ERROR [ 46%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_default_limit ERROR [ 48%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_limit_exceeds_available ERROR [ 50%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_zero_limit ERROR [ 51%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_negative_limit_excludes_end ERROR [ 53%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_large_negative_limit_returns_empty ERROR [ 54%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_no_results ERROR [ 56%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_exception ERROR [ 57%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_success ERROR [ 59%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_default_limit ERROR [ 60%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_no_results ERROR [ 62%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_zero_limit ERROR [ 63%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_negative_limit ERROR [ 65%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_exception ERROR [ 66%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_success ERROR [ 68%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_not_found ERROR [ 69%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_exception ERROR [ 71%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_brands_success ERROR [ 72%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_brands_empty ERROR [ 74%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_brands_exception ERROR [ 75%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_success ERROR [ 77%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_default_limit ERROR [ 78%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_limit_exceeds_available ERROR [ 80%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_zero_limit ERROR [ 81%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_negative_limit_excludes_end ERROR [ 83%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_large_negative_limit_returns_empty ERROR [ 84%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_no_results ERROR [ 86%]\ntests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_exception ERROR [ 87%]\ntests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_success ERROR [ 89%]\ntests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_default_args ERROR [ 90%]\ntests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_with_only_keyword ERROR [ 92%]\ntests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_with_only_category ERROR [ 93%]\ntests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_with_only_max_price ERROR [ 95%]\ntests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_zero_limit ERROR [ 96%]\ntests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_negative_limit ERROR [ 98%]\ntests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_exception ERROR [100%]\n\n==================================== ERRORS ====================================\n______________ ERROR at setup of TestProductDataService.test_init ______________\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 91\n      @pytest.mark.asyncio\n      async def test_init(self, mock_local_service, caplog):\n          \"\"\"Test ProductDataService initialization.\"\"\"\n          from app.services.product_data_service import ProductDataService\n          with caplog.at_level(logging.INFO):\n              service = ProductDataService()\n              assert service.local_service is mock_local_service\n              assert \"ProductDataService initialized with LocalProductService\" in caplog.text\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n____ ERROR at setup of TestProductDataService.test_search_products_success _____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 100\n      @pytest.mark.asyncio\n      async def test_search_products_success(self, product_data_service, mock_run_in_executor, caplog):\n          \"\"\"Test search_products returns products successfully.\"\"\"\n          expected_products = [{\"id\": \"1\", \"name\": \"Laptop\", \"price\": 1200}]\n          mock_run_in_executor.return_value = expected_products\n\n          with caplog.at_level(logging.INFO):\n              products = await product_data_service.search_products(\"laptop\", limit=5)\n              assert products == expected_products\n              assert \"Searching products with keyword: laptop\" in caplog.text\n              assert \"Found 1 products for keyword: laptop\" in caplog.text\n\n          # Verify run_in_executor was called with the correct local_service method and arguments\n          # The mock_run_in_executor fixture sets loop.run_in_executor.return_value to an AsyncMock\n          # It's mock_local_service.search_products that's passed as the callable to run_in_executor\n          # So we assert on mock_local_service itself.\n          product_data_service.local_service.search_products.assert_called_once_with(\"laptop\", 5)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n___ ERROR at setup of TestProductDataService.test_search_products_no_results ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 118\n      @pytest.mark.asyncio\n      async def test_search_products_no_results(self, product_data_service, mock_run_in_executor, caplog):\n          \"\"\"Test search_products returns an empty list when no products are found.\"\"\"\n          mock_run_in_executor.return_value = []\n\n          with caplog.at_level(logging.INFO):\n              products = await product_data_service.search_products(\"nonexistent\", limit=10)\n              assert products == []\n              assert \"Found 0 products for keyword: nonexistent\" in caplog.text\n\n          product_data_service.local_service.search_products.assert_called_once_with(\"nonexistent\", 10)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n___ ERROR at setup of TestProductDataService.test_search_products_exception ____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 130\n      @pytest.mark.asyncio\n      async def test_search_products_exception(self, product_data_service, mock_run_in_executor, caplog):\n          \"\"\"Test search_products handles exceptions gracefully and logs an error.\"\"\"\n          mock_run_in_executor.side_effect = Exception(\"Local service error during search\")\n\n          with caplog.at_level(logging.ERROR):\n              products = await product_data_service.search_products(\"error_case\")\n              assert products == []\n              assert \"Error searching products: Local service error during search\" in caplog.text\n\n          product_data_service.local_service.search_products.assert_called_once_with(\"error_case\", 10)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n___ ERROR at setup of TestProductDataService.test_search_products_zero_limit ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 142\n      @pytest.mark.asyncio\n      async def test_search_products_zero_limit(self, product_data_service, mock_run_in_executor, caplog):\n          \"\"\"Test search_products with limit=0 returns an empty list.\"\"\"\n          mock_run_in_executor.return_value = [] # The underlying service should return 0 items for limit 0\n\n          with caplog.at_level(logging.INFO):\n              products = await product_data_service.search_products(\"any\", limit=0)\n              assert products == []\n              assert \"Found 0 products for keyword: any\" in caplog.text\n\n          product_data_service.local_service.search_products.assert_called_once_with(\"any\", 0)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_search_products_negative_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 154\n      @pytest.mark.asyncio\n      async def test_search_products_negative_limit(self, product_data_service, mock_run_in_executor, caplog):\n          \"\"\"Test search_products passes a negative limit to the local service.\"\"\"\n          # The service itself does not validate negative limits, it passes them through.\n          # The behavior then depends on LocalProductService.\n          expected_products = [{\"id\": \"1\", \"name\": \"Negative Limit Product\"}]\n          mock_run_in_executor.return_value = expected_products\n\n          with caplog.at_level(logging.INFO):\n              products = await product_data_service.search_products(\"neg_limit\", limit=-5)\n              assert products == expected_products\n              assert \"Searching products with keyword: neg_limit\" in caplog.text\n              assert \"Found 1 products for keyword: neg_limit\" in caplog.text\n\n          product_data_service.local_service.search_products.assert_called_once_with(\"neg_limit\", -5)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n____ ERROR at setup of TestProductDataService.test_get_products_with_search ____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 171\n      @pytest.mark.asyncio\n      async def test_get_products_with_search(self, product_data_service, mock_run_in_executor, mocker):\n          \"\"\"Test get_products dispatches to search_products when 'search' keyword is present.\"\"\"\n          expected_products = [{\"id\": \"s1\", \"name\": \"Search Result\"}]\n          # Mock the underlying call that search_products uses\n          product_data_service.local_service.search_products.return_value = expected_products\n          mock_run_in_executor.return_value = expected_products # Ensures the await in search_products gets the value\n\n          # Ensure internal methods for category and all products are not called\n          mocker.patch.object(product_data_service, 'get_products_by_category')\n          mocker.patch.object(product_data_service, 'get_all_products')\n\n          products = await product_data_service.get_products(search=\"query\", limit=5)\n          assert products == expected_products\n          # Verify that local_service.search_products was called via run_in_executor (indirectly by search_products)\n          product_data_service.local_service.search_products.assert_called_once_with(\"query\", 5)\n          product_data_service.get_products_by_category.assert_not_called()\n          product_data_service.get_all_products.assert_not_called()\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n___ ERROR at setup of TestProductDataService.test_get_products_with_category ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 191\n      @pytest.mark.asyncio\n      async def test_get_products_with_category(self, product_data_service, mocker):\n          \"\"\"\n          Test get_products dispatches to get_products_by_category when 'category' is present,\n          and verifies the arguments passed to the internal method.\n          \"\"\"\n          expected_products = [{\"id\": \"c1\", \"name\": \"Category Item\"}]\n          # Patch the internal method of ProductDataService to control its return value and verify calls\n          mock_get_products_by_category = mocker.patch.object(\n              product_data_service, 'get_products_by_category', return_value=expected_products\n          )\n\n          products = await product_data_service.get_products(category=\"electronics\", limit=10)\n          assert products == expected_products\n          # Verify that the internal method was called with the correct arguments\n          mock_get_products_by_category.assert_called_once_with(\"electronics\", 10)\n          # Ensure search_products was not called (its underlying local service method)\n          product_data_service.local_service.search_products.assert_not_called()\n          # Ensure get_all_products was not called (its underlying local service method)\n          product_data_service.local_service.get_products.assert_not_called()\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n____ ERROR at setup of TestProductDataService.test_get_products_no_filters _____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 213\n      @pytest.mark.asyncio\n      async def test_get_products_no_filters(self, product_data_service, mocker):\n          \"\"\"\n          Test get_products dispatches to get_all_products when no filters are present,\n          and verifies the arguments passed to the internal method.\n          \"\"\"\n          expected_products = [{\"id\": \"a1\", \"name\": \"All Item\"}]\n          # Patch the internal method of ProductDataService to control its return value and verify calls\n          mock_get_all_products = mocker.patch.object(\n              product_data_service, 'get_all_products', return_value=expected_products\n          )\n\n          products = await product_data_service.get_products(limit=15)\n          assert products == expected_products\n          # Verify that the internal method was called with the correct arguments\n          mock_get_all_products.assert_called_once_with(15)\n          # Ensure search_products and get_products_by_category were not called (their underlying local service methods)\n          product_data_service.local_service.search_products.assert_not_called()\n          product_data_service.local_service.get_products_by_category.assert_not_called()\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_search_precedence _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 234\n      @pytest.mark.asyncio\n      async def test_get_products_search_precedence(self, product_data_service, mock_run_in_executor, mocker):\n          \"\"\"Test get_products prioritizes 'search' over 'category' if both are provided.\"\"\"\n          expected_products = [{\"id\": \"s_prec\", \"name\": \"Search Precedence\"}]\n          product_data_service.local_service.search_products.return_value = expected_products\n          mock_run_in_executor.return_value = expected_products\n\n          # Ensure internal methods for category and all products are not called by patching them directly\n          mocker.patch.object(product_data_service, 'get_products_by_category')\n          mocker.patch.object(product_data_service, 'get_all_products')\n\n          products = await product_data_service.get_products(search=\"query\", category=\"ignored\", limit=5)\n          assert products == expected_products\n          product_data_service.local_service.search_products.assert_called_once_with(\"query\", 5)\n          product_data_service.get_products_by_category.assert_not_called()\n          product_data_service.get_all_products.assert_not_called()\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_exception_fallback _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 251\n      @pytest.mark.asyncio\n      async def test_get_products_exception_fallback(self, product_data_service, mock_run_in_executor, caplog, mocker):\n          \"\"\"Test get_products falls back to local_service.get_products on error in 'search' dispatch.\"\"\"\n          # Simulate an error in the search path to trigger the fallback\n          mock_run_in_executor.side_effect = Exception(\"Search path failed\")\n\n          # Configure fallback method's return value\n          fallback_products = [{\"id\": \"fallback\", \"name\": \"Fallback Product\"}]\n          product_data_service.local_service.get_products.return_value = fallback_products\n\n          # Ensure internal methods for category and all products are not called by patching them directly\n          mocker.patch.object(product_data_service, 'get_products_by_category')\n          mocker.patch.object(product_data_service, 'get_all_products')\n\n\n          with caplog.at_level(logging.ERROR):\n              products = await product_data_service.get_products(search=\"err\", limit=5)\n              assert products == fallback_products\n              assert \"Error getting products: Search path failed\" in caplog.text\n\n          # Verify fallback call\n          product_data_service.local_service.get_products.assert_called_once_with(5)\n          product_data_service.get_products_by_category.assert_not_called()\n          product_data_service.get_all_products.assert_not_called()\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_with_category_exception_fallback _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 277\n      @pytest.mark.asyncio\n      async def test_get_products_with_category_exception_fallback(self, product_data_service, mocker, caplog):\n          \"\"\"\n          Test get_products falls back to local_service.get_products when\n          get_products_by_category (called internally) raises an exception.\n          \"\"\"\n          # Patch the internal method get_products_by_category to raise an exception\n          mock_get_products_by_category = mocker.patch.object(product_data_service, 'get_products_by_category', side_effect=Exception(\"Category processing failed\"))\n\n          # Configure fallback method's return value\n          fallback_products = [{\"id\": \"fallback_cat\", \"name\": \"Fallback Category Product\"}]\n          product_data_service.local_service.get_products.return_value = fallback_products\n\n          with caplog.at_level(logging.ERROR):\n              products = await product_data_service.get_products(category=\"error_cat\", limit=7)\n              assert products == fallback_products\n              assert \"Error getting products: Category processing failed\" in caplog.text\n\n          # Verify that get_products_by_category was attempted and then fallback occurred\n          mock_get_products_by_category.assert_called_once_with(\"error_cat\", 7)\n          product_data_service.local_service.get_products.assert_called_once_with(7)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_no_filters_exception_fallback _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 299\n      @pytest.mark.asyncio\n      async def test_get_products_no_filters_exception_fallback(self, product_data_service, mocker, caplog):\n          \"\"\"\n          Test get_products falls back to local_service.get_products when\n          get_all_products (called internally) raises an exception.\n          \"\"\"\n          # Patch the internal method get_all_products to raise an exception\n          mock_get_all_products = mocker.patch.object(product_data_service, 'get_all_products', side_effect=Exception(\"All products processing failed\"))\n\n          # Configure fallback method's return value\n          fallback_products = [{\"id\": \"fallback_all\", \"name\": \"Fallback All Product\"}]\n          product_data_service.local_service.get_products.return_value = fallback_products\n\n          with caplog.at_level(logging.ERROR):\n              products = await product_data_service.get_products(limit=12)\n              assert products == fallback_products\n              assert \"Error getting products: All products processing failed\" in caplog.text\n\n          # Verify that get_all_products was attempted and then fallback occurred\n          mock_get_all_products.assert_called_once_with(12)\n          product_data_service.local_service.get_products.assert_called_once_with(12)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n___ ERROR at setup of TestProductDataService.test_get_products_default_limit ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 321\n      @pytest.mark.asyncio\n      async def test_get_products_default_limit(self, product_data_service, mocker):\n          \"\"\"Test get_products uses default limit when no filters are specified.\"\"\"\n          expected_products = [{\"id\": \"default\", \"name\": \"Default Limit Product\"}]\n          # Patch the internal method to control return value and verify arguments\n          mock_get_all_products = mocker.patch.object(\n              product_data_service, 'get_all_products', return_value=expected_products\n          )\n\n          products = await product_data_service.get_products() # No limit specified\n          assert products == expected_products\n          mock_get_all_products.assert_called_once_with(20) # Default limit is 20\n          # Ensure other paths are not taken\n          product_data_service.local_service.search_products.assert_not_called()\n          product_data_service.local_service.get_products_by_category.assert_not_called()\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_exception_in_fallback _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 337\n      @pytest.mark.asyncio\n      async def test_get_products_exception_in_fallback(self, product_data_service, mock_run_in_executor, caplog):\n          \"\"\"\n          Test get_products when the initial call fails, and the fallback local_service.get_products also fails,\n          leading to the exception propagating (for search path).\n          \"\"\"\n          # Simulate the initial path (e.g., search_products) raising an exception\n          mock_run_in_executor.side_effect = Exception(\"Initial search path failed\")\n\n          # Simulate the fallback call (local_service.get_products) also raising an exception\n          product_data_service.local_service.get_products.side_effect = Exception(\"Fallback local service failed\")\n\n          with caplog.at_level(logging.ERROR):\n              with pytest.raises(Exception, match=\"Fallback local service failed\"):\n                  await product_data_service.get_products(search=\"double_fail\", limit=5)\n\n              # Verify the first error was logged. The second exception propagates out.\n              assert \"Error getting products: Initial search path failed\" in caplog.text\n\n          # Verify both underlying calls were made\n          product_data_service.local_service.search_products.assert_called_once_with(\"double_fail\", 5) # Triggered by the search path\n          product_data_service.local_service.get_products.assert_called_once_with(5) # The fallback call\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_category_path_and_fallback_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 360\n      @pytest.mark.asyncio\n      async def test_get_products_category_path_and_fallback_exception(self, product_data_service, mocker, caplog):\n          \"\"\"\n          Test get_products when the category path fails, and the fallback local_service.get_products also fails,\n          leading to the exception propagating.\n          \"\"\"\n          # Simulate the category path (get_products_by_category) raising an exception\n          mock_get_products_by_category = mocker.patch.object(product_data_service, 'get_products_by_category', side_effect=Exception(\"Category path failed\"))\n\n          # Simulate the fallback call (local_service.get_products) also raising an exception\n          product_data_service.local_service.get_products.side_effect = Exception(\"Fallback local service failed\")\n\n          with caplog.at_level(logging.ERROR):\n              with pytest.raises(Exception, match=\"Fallback local service failed\"):\n                  await product_data_service.get_products(category=\"double_fail_cat\", limit=7)\n\n              # Verify the first error was logged. The second exception propagates out.\n              assert \"Error getting products: Category path failed\" in caplog.text\n\n          # Verify both underlying calls were made\n          mock_get_products_by_category.assert_called_once_with(\"double_fail_cat\", 7)\n          product_data_service.local_service.get_products.assert_called_once_with(7)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_no_filters_path_and_fallback_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 383\n      @pytest.mark.asyncio\n      async def test_get_products_no_filters_path_and_fallback_exception(self, product_data_service, mocker, caplog):\n          \"\"\"\n          Test get_products when the no-filters path fails, and the fallback local_service.get_products also fails,\n          leading to the exception propagating.\n          \"\"\"\n          # Simulate the no-filters path (get_all_products) raising an exception\n          mock_get_all_products = mocker.patch.object(product_data_service, 'get_all_products', side_effect=Exception(\"All products path failed\"))\n\n          # Simulate the fallback call (local_service.get_products) also raising an exception\n          product_data_service.local_service.get_products.side_effect = Exception(\"Fallback local service failed\")\n\n          with caplog.at_level(logging.ERROR):\n              with pytest.raises(Exception, match=\"Fallback local service failed\"):\n                  await product_data_service.get_products(limit=12)\n\n              # Verify the first error was logged. The second exception propagates out.\n              assert \"Error getting products: All products path failed\" in caplog.text\n\n          # Verify both underlying calls were made\n          mock_get_all_products.assert_called_once_with(12)\n          product_data_service.local_service.get_products.assert_called_once_with(12)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_____ ERROR at setup of TestProductDataService.test_get_categories_success _____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 407\n      @pytest.mark.asyncio\n      async def test_get_categories_success(self, product_data_service):\n          \"\"\"Test get_categories returns categories successfully.\"\"\"\n          expected_categories = [\"Electronics\", \"Books\", \"Clothing\"]\n          product_data_service.local_service.get_categories.return_value = expected_categories\n\n          categories = await product_data_service.get_categories()\n          assert categories == expected_categories\n          product_data_service.local_service.get_categories.assert_called_once()\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n______ ERROR at setup of TestProductDataService.test_get_categories_empty ______\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 417\n      @pytest.mark.asyncio\n      async def test_get_categories_empty(self, product_data_service):\n          \"\"\"Test get_categories returns an empty list when no categories are available.\"\"\"\n          product_data_service.local_service.get_categories.return_value = []\n\n          categories = await product_data_service.get_categories()\n          assert categories == []\n          product_data_service.local_service.get_categories.assert_called_once()\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n____ ERROR at setup of TestProductDataService.test_get_categories_exception ____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 426\n      @pytest.mark.asyncio\n      async def test_get_categories_exception(self, product_data_service, caplog):\n          \"\"\"Test get_categories handles exceptions gracefully.\"\"\"\n          product_data_service.local_service.get_categories.side_effect = Exception(\"Category service down\")\n\n          with caplog.at_level(logging.ERROR):\n              categories = await product_data_service.get_categories()\n              assert categories == []\n              assert \"Error getting categories: Category service down\" in caplog.text\n\n          product_data_service.local_service.get_categories.assert_called_once()\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_top_rated_products_success _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 439\n      @pytest.mark.asyncio\n      async def test_get_top_rated_products_success(self, product_data_service):\n          \"\"\"Test get_top_rated_products returns products successfully.\"\"\"\n          expected_products = [{\"id\": \"t1\", \"name\": \"Top Product\", \"rating\": 5.0}]\n          product_data_service.local_service.get_top_rated_products.return_value = expected_products\n\n          products = await product_data_service.get_top_rated_products(limit=2)\n          assert products == expected_products\n          product_data_service.local_service.get_top_rated_products.assert_called_once_with(2)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n__ ERROR at setup of TestProductDataService.test_get_top_rated_products_empty __\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 449\n      @pytest.mark.asyncio\n      async def test_get_top_rated_products_empty(self, product_data_service):\n          \"\"\"Test get_top_rated_products returns empty list when no products are found.\"\"\"\n          product_data_service.local_service.get_top_rated_products.return_value = []\n          products = await product_data_service.get_top_rated_products(limit=5)\n          assert products == []\n          product_data_service.local_service.get_top_rated_products.assert_called_once_with(5)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_top_rated_products_zero_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 457\n      @pytest.mark.asyncio\n      async def test_get_top_rated_products_zero_limit(self, product_data_service):\n          \"\"\"Test get_top_rated_products with limit=0 returns empty list.\"\"\"\n          product_data_service.local_service.get_top_rated_products.return_value = [] # The underlying service should return 0 for limit 0\n          products = await product_data_service.get_top_rated_products(limit=0)\n          assert products == []\n          product_data_service.local_service.get_top_rated_products.assert_called_once_with(0)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_top_rated_products_negative_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 465\n      @pytest.mark.asyncio\n      async def test_get_top_rated_products_negative_limit(self, product_data_service):\n          \"\"\"Test get_top_rated_products passes a negative limit to the local service.\"\"\"\n          expected_products = [{\"id\": \"t_neg\", \"name\": \"Negative Limit Top Product\"}]\n          product_data_service.local_service.get_top_rated_products.return_value = expected_products\n\n          products = await product_data_service.get_top_rated_products(limit=-2)\n          assert products == expected_products\n          product_data_service.local_service.get_top_rated_products.assert_called_once_with(-2)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_top_rated_products_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 476\n      @pytest.mark.asyncio\n      async def test_get_top_rated_products_exception(self, product_data_service, caplog):\n          \"\"\"Test get_top_rated_products handles exceptions gracefully.\"\"\"\n          product_data_service.local_service.get_top_rated_products.side_effect = Exception(\"Top rated service error\")\n\n          with caplog.at_level(logging.ERROR):\n              products = await product_data_service.get_top_rated_products()\n              assert products == []\n              assert \"Error getting top rated products: Top rated service error\" in caplog.text\n\n          product_data_service.local_service.get_top_rated_products.assert_called_once_with(10)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_best_selling_products_success _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 489\n      @pytest.mark.asyncio\n      async def test_get_best_selling_products_success(self, product_data_service):\n          \"\"\"Test get_best_selling_products returns products successfully.\"\"\"\n          expected_products = [{\"id\": \"b1\", \"name\": \"Best Seller\", \"sales\": 1000}]\n          product_data_service.local_service.get_best_selling_products.return_value = expected_products\n\n          products = await product_data_service.get_best_selling_products(limit=3)\n          assert products == expected_products\n          product_data_service.local_service.get_best_selling_products.assert_called_once_with(3)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_best_selling_products_empty _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 499\n      @pytest.mark.asyncio\n      async def test_get_best_selling_products_empty(self, product_data_service):\n          \"\"\"Test get_best_selling_products returns empty list when no products are found.\"\"\"\n          product_data_service.local_service.get_best_selling_products.return_value = []\n          products = await product_data_service.get_best_selling_products(limit=5)\n          assert products == []\n          product_data_service.local_service.get_best_selling_products.assert_called_once_with(5)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_best_selling_products_zero_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 507\n      @pytest.mark.asyncio\n      async def test_get_best_selling_products_zero_limit(self, product_data_service):\n          \"\"\"Test get_best_selling_products with limit=0 returns empty list.\"\"\"\n          product_data_service.local_service.get_best_selling_products.return_value = [] # The underlying service should return 0 for limit 0\n          products = await product_data_service.get_best_selling_products(limit=0)\n          assert products == []\n          product_data_service.local_service.get_best_selling_products.assert_called_once_with(0)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_best_selling_products_negative_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 515\n      @pytest.mark.asyncio\n      async def test_get_best_selling_products_negative_limit(self, product_data_service):\n          \"\"\"Test get_best_selling_products passes a negative limit to the local service.\"\"\"\n          expected_products = [{\"id\": \"b_neg\", \"name\": \"Negative Limit Best Seller\"}]\n          product_data_service.local_service.get_best_selling_products.return_value = expected_products\n\n          products = await product_data_service.get_best_selling_products(limit=-3)\n          assert products == expected_products\n          product_data_service.local_service.get_best_selling_products.assert_called_once_with(-3)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_best_selling_products_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 526\n      @pytest.mark.asyncio\n      async def test_get_best_selling_products_exception(self, product_data_service, caplog):\n          \"\"\"Test get_best_selling_products handles exceptions gracefully.\"\"\"\n          product_data_service.local_service.get_best_selling_products.side_effect = Exception(\"Best selling service error\")\n\n          with caplog.at_level(logging.ERROR):\n              products = await product_data_service.get_best_selling_products()\n              assert products == []\n              assert \"Error getting best selling products: Best selling service error\" in caplog.text\n\n          product_data_service.local_service.get_best_selling_products.assert_called_once_with(10)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_category_success _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 539\n      def test_get_products_by_category_success(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_category_default_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 550\n      def test_get_products_by_category_default_limit(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_category_limit_exceeds_available _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 561\n      def test_get_products_by_category_limit_exceeds_available(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_category_zero_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 570\n      def test_get_products_by_category_zero_limit(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_category_negative_limit_excludes_end _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 578\n      def test_get_products_by_category_negative_limit_excludes_end(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_category_large_negative_limit_returns_empty _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 587\n      def test_get_products_by_category_large_negative_limit_returns_empty(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_category_no_results _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 597\n      def test_get_products_by_category_no_results(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_category_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 605\n      def test_get_products_by_category_exception(self, product_data_service, caplog):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n____ ERROR at setup of TestProductDataService.test_get_all_products_success ____\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 617\n      def test_get_all_products_success(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_all_products_default_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 627\n      def test_get_all_products_default_limit(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n__ ERROR at setup of TestProductDataService.test_get_all_products_no_results ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 636\n      def test_get_all_products_no_results(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n__ ERROR at setup of TestProductDataService.test_get_all_products_zero_limit ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 644\n      def test_get_all_products_zero_limit(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_all_products_negative_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 651\n      def test_get_all_products_negative_limit(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n___ ERROR at setup of TestProductDataService.test_get_all_products_exception ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 661\n      def test_get_all_products_exception(self, product_data_service, caplog):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n__ ERROR at setup of TestProductDataService.test_get_product_details_success ___\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 673\n      def test_get_product_details_success(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_product_details_not_found __\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 682\n      def test_get_product_details_not_found(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_product_details_exception __\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 690\n      def test_get_product_details_exception(self, product_data_service, caplog):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_______ ERROR at setup of TestProductDataService.test_get_brands_success _______\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 702\n      def test_get_brands_success(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n________ ERROR at setup of TestProductDataService.test_get_brands_empty ________\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 711\n      def test_get_brands_empty(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n______ ERROR at setup of TestProductDataService.test_get_brands_exception ______\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 719\n      def test_get_brands_exception(self, product_data_service, caplog):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_brand_success __\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 731\n      def test_get_products_by_brand_success(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_brand_default_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 741\n      def test_get_products_by_brand_default_limit(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_brand_limit_exceeds_available _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 751\n      def test_get_products_by_brand_limit_exceeds_available(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_brand_zero_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 760\n      def test_get_products_by_brand_zero_limit(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_brand_negative_limit_excludes_end _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 768\n      def test_get_products_by_brand_negative_limit_excludes_end(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_brand_large_negative_limit_returns_empty _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 777\n      def test_get_products_by_brand_large_negative_limit_returns_empty(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_brand_no_results _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 786\n      def test_get_products_by_brand_no_results(self, product_data_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_get_products_by_brand_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 794\n      def test_get_products_by_brand_exception(self, product_data_service, caplog):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_smart_search_products_success __\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 806\n      @pytest.mark.asyncio\n      async def test_smart_search_products_success(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test smart_search_products returns products and message successfully.\"\"\"\n          expected_products = [{\"id\": \"s_s1\", \"name\": \"Smart Item\"}]\n          expected_message = \"Smart search completed.\"\n          mock_run_executor_result = (expected_products, expected_message)\n          mock_run_in_executor.return_value = mock_run_executor_result # What the await resolves to\n\n          products, message = await product_data_service.smart_search_products(\n              keyword=\"smart\", category=\"books\", max_price=50, limit=3\n          )\n          assert products == expected_products\n          assert message == expected_message\n\n          product_data_service.local_service.smart_search_products.assert_called_once_with(\n              \"smart\", \"books\", 50, 3\n          )\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_smart_search_products_default_args _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 824\n      @pytest.mark.asyncio\n      async def test_smart_search_products_default_args(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test smart_search_products uses default arguments correctly.\"\"\"\n          expected_products = [{\"id\": \"s_s_def\", \"name\": \"Default Search\"}]\n          expected_message = \"Default search.\"\n          mock_run_executor_result = (expected_products, expected_message)\n          mock_run_in_executor.return_value = mock_run_executor_result\n\n          products, message = await product_data_service.smart_search_products() # No args\n          assert products == expected_products\n          assert message == expected_message\n\n          # Verify that the local service method was called with default values\n          product_data_service.local_service.smart_search_products.assert_called_once_with(\n              '', None, None, 5\n          )\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_smart_search_products_with_only_keyword _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 841\n      @pytest.mark.asyncio\n      async def test_smart_search_products_with_only_keyword(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test smart_search_products with only keyword specified.\"\"\"\n          expected_products = [{\"id\": \"k1\", \"name\": \"Keyword Item\"}]\n          expected_message = \"Keyword search done.\"\n          mock_run_in_executor.return_value = (expected_products, expected_message)\n\n          products, message = await product_data_service.smart_search_products(keyword=\"test_keyword\", limit=1)\n          assert products == expected_products\n          assert message == expected_message\n          product_data_service.local_service.smart_search_products.assert_called_once_with(\"test_keyword\", None, None, 1)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_smart_search_products_with_only_category _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 853\n      @pytest.mark.asyncio\n      async def test_smart_search_products_with_only_category(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test smart_search_products with only category specified.\"\"\"\n          expected_products = [{\"id\": \"c1\", \"name\": \"Category Item\"}]\n          expected_message = \"Category search done.\"\n          mock_run_in_executor.return_value = (expected_products, expected_message)\n\n          products, message = await product_data_service.smart_search_products(category=\"electronics\", limit=2)\n          assert products == expected_products\n          assert message == expected_message\n          product_data_service.local_service.smart_search_products.assert_called_once_with('', \"electronics\", None, 2)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_smart_search_products_with_only_max_price _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 865\n      @pytest.mark.asyncio\n      async def test_smart_search_products_with_only_max_price(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test smart_search_products with only max_price specified.\"\"\"\n          expected_products = [{\"id\": \"p1\", \"name\": \"Price Item\"}]\n          expected_message = \"Price search done.\"\n          mock_run_in_executor.return_value = (expected_products, expected_message)\n\n          products, message = await product_data_service.smart_search_products(max_price=100, limit=2)\n          assert products == expected_products\n          assert message == expected_message\n          product_data_service.local_service.smart_search_products.assert_called_once_with('', None, 100, 2)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_smart_search_products_zero_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 878\n      @pytest.mark.asyncio\n      async def test_smart_search_products_zero_limit(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test smart_search_products with limit=0.\"\"\"\n          expected_products = []\n          expected_message = \"No results due to limit 0.\"\n          mock_run_executor_result = (expected_products, expected_message)\n          mock_run_in_executor.return_value = mock_run_executor_result\n\n          products, message = await product_data_service.smart_search_products(limit=0)\n          assert products == expected_products\n          assert message == expected_message\n          product_data_service.local_service.smart_search_products.assert_called_once_with('', None, None, 0)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_smart_search_products_negative_limit _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 891\n      @pytest.mark.asyncio\n      async def test_smart_search_products_negative_limit(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test smart_search_products passes a negative limit to the local service.\"\"\"\n          expected_products = [{\"id\": \"ss_neg\", \"name\": \"Negative Smart Search Product\"}]\n          expected_message = \"Smart search negative limit.\"\n          mock_run_in_executor.return_value = (expected_products, expected_message)\n\n          products, message = await product_data_service.smart_search_products(limit=-2)\n          assert products == expected_products\n          assert message == expected_message\n          product_data_service.local_service.smart_search_products.assert_called_once_with('', None, None, -2)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n_ ERROR at setup of TestProductDataService.test_smart_search_products_exception _\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 904\n      @pytest.mark.asyncio\n      async def test_smart_search_products_exception(self, product_data_service, mock_run_in_executor):\n          \"\"\"Test smart_search_products propagates exceptions as it has no try-except.\"\"\"\n          mock_run_in_executor.side_effect = Exception(\"Smart search internal error\")\n\n          with pytest.raises(Exception, match=\"Smart search internal error\"):\n              await product_data_service.smart_search_products(\"fail_keyword\")\n\n          # Verify that the local service method was still attempted to be called\n          product_data_service.local_service.smart_search_products.assert_called_once_with(\"fail_keyword\", None, None, 5)\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 54\n  @pytest.fixture\n  def product_data_service(mock_local_service):\nfile /home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py, line 26\n  @pytest.fixture\n  def mock_local_service(mocker):\nE       fixture 'mocker' not found\n>       available fixtures: _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_local_service, mock_run_in_executor, monkeypatch, no_cover, product_data_service, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tests/test_services/product_data_service.py::<event_loop>, tests/test_services/product_data_service.py::TestProductDataService::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/work/ai-product-qa/ai-product-qa/tests/test_services/product_data_service.py:26\n=========================== short test summary info ============================\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_init\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_search_products_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_search_products_no_results\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_search_products_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_search_products_zero_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_search_products_negative_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_with_search\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_with_category\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_no_filters\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_search_precedence\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_exception_fallback\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_with_category_exception_fallback\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_no_filters_exception_fallback\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_default_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_exception_in_fallback\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_category_path_and_fallback_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_no_filters_path_and_fallback_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_categories_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_categories_empty\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_categories_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_empty\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_zero_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_negative_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_top_rated_products_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_empty\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_zero_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_negative_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_best_selling_products_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_default_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_limit_exceeds_available\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_zero_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_negative_limit_excludes_end\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_large_negative_limit_returns_empty\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_no_results\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_category_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_default_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_no_results\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_zero_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_negative_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_all_products_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_not_found\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_product_details_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_brands_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_brands_empty\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_brands_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_default_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_limit_exceeds_available\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_zero_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_negative_limit_excludes_end\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_large_negative_limit_returns_empty\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_no_results\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_get_products_by_brand_exception\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_success\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_default_args\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_with_only_keyword\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_with_only_category\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_with_only_max_price\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_zero_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_negative_limit\nERROR tests/test_services/product_data_service.py::TestProductDataService::test_smart_search_products_exception\n============================== 66 errors in 0.19s ==============================\n",
        "stderr": "",
        "returncode": 1
      }
    },
    {
      "filepath": "app/utils/config.py",
      "coverage": 86.36,
      "test_generated": true,
      "test_saved": true,
      "test_result": {
        "success": false,
        "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.11.13, pytest-7.4.3, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.11.13/x64/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/work/ai-product-qa/ai-product-qa\nplugins: anyio-4.9.0, cov-4.1.0, asyncio-0.23.6\nasyncio: mode=Mode.STRICT\ncollecting ... collected 27 items\n\ntests/test_utils/config.py::TestSettings::test_settings_init_success_with_all_variables PASSED [  3%]\ntests/test_utils/config.py::TestSettings::test_settings_init_success_with_defaults PASSED [  7%]\ntests/test_utils/config.py::TestSettings::test_settings_init_with_direct_kwargs PASSED [ 11%]\ntests/test_utils/config.py::TestSettings::test_settings_init_success_from_env_file PASSED [ 14%]\ntests/test_utils/config.py::TestSettings::test_settings_env_var_overrides_env_file PASSED [ 18%]\ntests/test_utils/config.py::TestSettings::test_settings_init_kwargs_overrides_env_file PASSED [ 22%]\ntests/test_utils/config.py::TestSettings::test_settings_init_success_when_env_file_does_not_exist PASSED [ 25%]\ntests/test_utils/config.py::TestSettings::test_settings_init_raises_error_on_missing_google_api_key FAILED [ 29%]\ntests/test_utils/config.py::TestSettings::test_settings_init_raises_error_on_placeholder_google_api_key PASSED [ 33%]\ntests/test_utils/config.py::TestSettings::test_settings_init_raises_error_on_empty_string_google_api_key_kwarg FAILED [ 37%]\ntests/test_utils/config.py::TestSettings::test_settings_init_raises_error_on_empty_string_google_api_key_env_var PASSED [ 40%]\ntests/test_utils/config.py::TestSettings::test_settings_init_raises_validation_error_on_none_google_api_key_kwarg FAILED [ 44%]\ntests/test_utils/config.py::TestSettings::test_settings_init_fails_on_invalid_port_type FAILED [ 48%]\ntests/test_utils/config.py::TestSettings::test_settings_init_fails_on_invalid_debug_type FAILED [ 51%]\ntests/test_utils/config.py::TestSettings::test_settings_init_success_debug_from_string_true PASSED [ 55%]\ntests/test_utils/config.py::TestSettings::test_settings_init_success_debug_from_string_false PASSED [ 59%]\ntests/test_utils/config.py::TestSettings::test_settings_init_success_debug_from_string_one PASSED [ 62%]\ntests/test_utils/config.py::TestSettings::test_settings_init_success_debug_from_string_zero PASSED [ 66%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_get_settings_returns_settings_instance PASSED [ 70%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_get_settings_uses_lru_cache PASSED [ 74%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_get_settings_cache_info PASSED [ 77%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_is_initialized_correctly PASSED [ 81%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_is_immutable_after_initial_import PASSED [ 85%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_fails_on_missing_key_at_import FAILED [ 88%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_fails_on_placeholder_key_at_import FAILED [ 92%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_get_settings_cache_clear_functionality PASSED [ 96%]\ntests/test_utils/config.py::TestGetSettingsAndGlobal::test_logger_name_and_type FAILED [100%]\n\n=================================== FAILURES ===================================\n____ TestSettings.test_settings_init_raises_error_on_missing_google_api_key ____\ntests/test_utils/config.py:273: in test_settings_init_raises_error_on_missing_google_api_key\n    assert \"GOOGLE_API_KEY must be set in .env file\" in str(excinfo.value)\nE   AssertionError: assert 'GOOGLE_API_KEY must be set in .env file' in '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing'\nE    +  where '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing' = str(1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing)\nE    +    where 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing = <ExceptionInfo 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing tblen=6>.value\n_ TestSettings.test_settings_init_raises_error_on_empty_string_google_api_key_kwarg _\ntests/test_utils/config.py:305: in test_settings_init_raises_error_on_empty_string_google_api_key_kwarg\n    assert \"GOOGLE_API_KEY must be set in .env file\" in str(excinfo.value)\nE   AssertionError: assert 'GOOGLE_API_KEY must be set in .env file' in '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing'\nE    +  where '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing' = str(1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing)\nE    +    where 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing = <ExceptionInfo 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing tblen=6>.value\n_ TestSettings.test_settings_init_raises_validation_error_on_none_google_api_key_kwarg _\ntests/test_utils/config.py:339: in test_settings_init_raises_validation_error_on_none_google_api_key_kwarg\n    assert any(msg in str(excinfo.value) for msg in [\"value is not a valid string\", \"Input should be a valid string\"])\nE   assert False\nE    +  where False = any(<generator object TestSettings.test_settings_init_raises_validation_error_on_none_google_api_key_kwarg.<locals>.<genexpr> at 0x7f24472fad40>)\n__________ TestSettings.test_settings_init_fails_on_invalid_port_type __________\ntests/test_utils/config.py:349: in test_settings_init_fails_on_invalid_port_type\n    from app.utils.config import Settings\napp/utils/config.py:30: in <module>\n    settings = get_settings()\napp/utils/config.py:28: in get_settings\n    return Settings()\napp/utils/config.py:21: in __init__\n    super().__init__(**kwargs)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic_settings/main.py:176: in __init__\n    super().__init__(\nE   pydantic_core._pydantic_core.ValidationError: 1 validation error for Settings\nE   API_PORT\nE     Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='not_an_integer', input_type=str]\nE       For further information visit https://errors.pydantic.dev/2.11/v/int_parsing\n_________ TestSettings.test_settings_init_fails_on_invalid_debug_type __________\ntests/test_utils/config.py:364: in test_settings_init_fails_on_invalid_debug_type\n    from app.utils.config import Settings\napp/utils/config.py:30: in <module>\n    settings = get_settings()\napp/utils/config.py:28: in get_settings\n    return Settings()\napp/utils/config.py:21: in __init__\n    super().__init__(**kwargs)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic_settings/main.py:176: in __init__\n    super().__init__(\nE   pydantic_core._pydantic_core.ValidationError: 1 validation error for Settings\nE   DEBUG\nE     Input should be a valid boolean, unable to interpret input [type=bool_parsing, input_value='not_a_boolean', input_type=str]\nE       For further information visit https://errors.pydantic.dev/2.11/v/bool_parsing\n_ TestGetSettingsAndGlobal.test_global_settings_fails_on_missing_key_at_import _\ntests/test_utils/config.py:545: in test_global_settings_fails_on_missing_key_at_import\n    with pytest.raises(ValueError) as excinfo:\nE   Failed: DID NOT RAISE <class 'ValueError'>\n_ TestGetSettingsAndGlobal.test_global_settings_fails_on_placeholder_key_at_import _\ntests/test_utils/config.py:562: in test_global_settings_fails_on_placeholder_key_at_import\n    with pytest.raises(ValueError) as excinfo:\nE   Failed: DID NOT RAISE <class 'ValueError'>\n______________ TestGetSettingsAndGlobal.test_logger_name_and_type ______________\ntests/test_utils/config.py:601: in test_logger_name_and_type\n    from app.utils.config import logger\napp/utils/config.py:30: in <module>\n    settings = get_settings()\napp/utils/config.py:28: in get_settings\n    return Settings()\napp/utils/config.py:21: in __init__\n    super().__init__(**kwargs)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic_settings/main.py:176: in __init__\n    super().__init__(\nE   pydantic_core._pydantic_core.ValidationError: 1 validation error for Settings\nE   GOOGLE_API_KEY\nE     Field required [type=missing, input_value={}, input_type=dict]\nE       For further information visit https://errors.pydantic.dev/2.11/v/missing\n=============================== warnings summary ===============================\ntests/test_utils/config.py: 25 warnings\n  /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/\n    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_utils/config.py::TestSettings::test_settings_init_raises_error_on_missing_google_api_key - AssertionError: assert 'GOOGLE_API_KEY must be set in .env file' in '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing'\n +  where '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing' = str(1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing)\n +    where 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing = <ExceptionInfo 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing tblen=6>.value\nFAILED tests/test_utils/config.py::TestSettings::test_settings_init_raises_error_on_empty_string_google_api_key_kwarg - AssertionError: assert 'GOOGLE_API_KEY must be set in .env file' in '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing'\n +  where '1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing' = str(1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing)\n +    where 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing = <ExceptionInfo 1 validation error for Settings\\nGOOGLE_API_KEY\\n  Field required [type=missing, input_value={}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.11/v/missing tblen=6>.value\nFAILED tests/test_utils/config.py::TestSettings::test_settings_init_raises_validation_error_on_none_google_api_key_kwarg - assert False\n +  where False = any(<generator object TestSettings.test_settings_init_raises_validation_error_on_none_google_api_key_kwarg.<locals>.<genexpr> at 0x7f24472fad40>)\nFAILED tests/test_utils/config.py::TestSettings::test_settings_init_fails_on_invalid_port_type - pydantic_core._pydantic_core.ValidationError: 1 validation error for Settings\nAPI_PORT\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='not_an_integer', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/int_parsing\nFAILED tests/test_utils/config.py::TestSettings::test_settings_init_fails_on_invalid_debug_type - pydantic_core._pydantic_core.ValidationError: 1 validation error for Settings\nDEBUG\n  Input should be a valid boolean, unable to interpret input [type=bool_parsing, input_value='not_a_boolean', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/bool_parsing\nFAILED tests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_fails_on_missing_key_at_import - Failed: DID NOT RAISE <class 'ValueError'>\nFAILED tests/test_utils/config.py::TestGetSettingsAndGlobal::test_global_settings_fails_on_placeholder_key_at_import - Failed: DID NOT RAISE <class 'ValueError'>\nFAILED tests/test_utils/config.py::TestGetSettingsAndGlobal::test_logger_name_and_type - pydantic_core._pydantic_core.ValidationError: 1 validation error for Settings\nGOOGLE_API_KEY\n  Field required [type=missing, input_value={}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\n================== 8 failed, 19 passed, 25 warnings in 0.30s ===================\n",
        "stderr": "",
        "returncode": 1
      }
    }
  ],
  "success_count": 0,
  "error_count": 4
}