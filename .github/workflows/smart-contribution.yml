name: Smart AI Contribution Bot

on:
  schedule:
    # Reduced to 9 random scheduled runs per day (always <10)
    - cron: '7 0 * * *'    # 12:07 AM
    - cron: '23 3 * * *'   # 3:23 AM
    - cron: '41 6 * * *'   # 6:41 AM
    - cron: '15 9 * * *'   # 9:15 AM
    - cron: '33 12 * * *'  # 12:33 PM
    - cron: '52 15 * * *'  # 3:52 PM
    - cron: '18 18 * * *'  # 6:18 PM
    - cron: '37 20 * * *'  # 8:37 PM
    - cron: '9 22 * * *'   # 10:09 PM
    
    # Additional high-frequency runs for target achievement
    - cron: '58 0 * * *'   # 12:58 AM
    - cron: '16 1 * * *'   # 1:16 AM
    - cron: '34 1 * * *'   # 1:34 AM
    - cron: '54 2 * * *'   # 2:54 AM
    - cron: '22 3 * * *'   # 3:22 AM
    - cron: '42 3 * * *'   # 3:42 AM
    - cron: '3 4 * * *'    # 4:03 AM
    - cron: '24 4 * * *'   # 4:24 AM
    - cron: '45 4 * * *'   # 4:45 AM
    - cron: '7 5 * * *'    # 5:07 AM
    - cron: '26 5 * * *'   # 5:26 AM
    - cron: '47 5 * * *'   # 5:47 AM
    - cron: '9 6 * * *'    # 6:09 AM
    - cron: '31 6 * * *'   # 6:31 AM
    - cron: '50 6 * * *'   # 6:50 AM
    - cron: '13 7 * * *'   # 7:13 AM
    - cron: '34 7 * * *'   # 7:34 AM
    - cron: '55 7 * * *'   # 7:55 AM
    
    # Weekend boost for consistency
    - cron: '2 3 * * 0'    # Sunday 3:02 AM
    - cron: '16 8 * * 0'   # Sunday 8:16 AM
    - cron: '34 13 * * 0'  # Sunday 1:34 PM
    - cron: '47 18 * * 0'  # Sunday 6:47 PM
    - cron: '55 21 * * 0'  # Sunday 9:55 PM
    
    - cron: '21 4 * * 6'   # Saturday 4:21 AM
    - cron: '43 10 * * 6'  # Saturday 10:43 AM
    - cron: '5 15 * * 6'   # Saturday 3:05 PM
    - cron: '22 20 * * 6'  # Saturday 8:22 PM
    - cron: '58 22 * * 6'  # Saturday 10:58 PM
    
  workflow_dispatch:
    inputs:
      contribution_type:
        description: 'Type of contribution to generate'
        required: false
        default: 'random'
        type: choice
        options:
          - random
          - code_optimization
          - documentation_improvement
          - code_comments
          - refactoring_suggestions
          - performance_analysis
          - security_review
          - type_hints_addition
          - error_handling_improvement
          - logging_enhancement
          - configuration_update
          - project_analysis
      force_run:
        description: 'Force run even if recent commits exist'
        required: false
        default: false
        type: boolean

# Add proper permissions for GitHub Actions
permissions:
  contents: write
  actions: write

jobs:
  smart-contribution:
    runs-on: ubuntu-latest
    
    # Prevent multiple instances running simultaneously
    concurrency:
      group: smart-contribution-bot
      cancel-in-progress: false
    
    # Add timeout to prevent runaway processes
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Use github.token like the working auto-commit workflow
        token: ${{ github.token }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure Git
      run: |
        # Use same pattern as auto-commit workflow
        REPO_OWNER="${{ github.repository_owner }}"
        git config --global user.name "$REPO_OWNER"
        git config --global user.email "$REPO_OWNER@users.noreply.github.com"
        echo "Git configured for contributions: $REPO_OWNER"
    
    - name: Check repository permissions
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Token permissions check..."
        git remote -v
        git status
    
    - name: Check for recent commits (smart throttling)
      id: check_commits
      run: |
        # More aggressive throttling - check last 15 minutes only
        RECENT_COMMITS=$(git log --since="15 minutes ago" --oneline | wc -l)
        FORCE_RUN="${{ github.event.inputs.force_run }}"
        
        if [ "$FORCE_RUN" = "true" ]; then
          echo "Force run enabled, proceeding"
          echo "skip=false" >> $GITHUB_OUTPUT
        elif [ $RECENT_COMMITS -gt 1 ]; then
          echo "Recent commits in last 15 minutes ($RECENT_COMMITS), skipping to avoid spam"
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          # Reduced random skip chance for higher frequency (10% instead of 15%)
          RANDOM_SKIP=$((RANDOM % 100))
          if [ $RANDOM_SKIP -lt 10 ]; then
            echo "Random skip for natural variation (10% chance)"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Proceeding with contribution"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
        fi
    
    - name: Run Smart Contribution Bot
      if: steps.check_commits.outputs.skip == 'false'
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        CONTRIBUTION_TYPE: ${{ github.event.inputs.contribution_type || 'random' }}
      run: |
        # Shorter randomization for higher frequency (optimized for 50/day)
        DELAY=$((RANDOM % 120 + 15))  # 15 seconds to 2 minutes delay
        echo "‚è≥ Waiting $DELAY seconds for natural timing..."
        sleep $DELAY
        
        # Additional contribution type randomization based on time
        HOUR=$(date +%H)
        if [ "$CONTRIBUTION_TYPE" = "random" ]; then
          # Time-based biases for more natural patterns
          if [ $HOUR -ge 0 ] && [ $HOUR -lt 6 ]; then
            # Night hours: focus on maintenance tasks
            export NIGHT_BIAS="security_review,error_handling_improvement,logging_enhancement"
          elif [ $HOUR -ge 6 ] && [ $HOUR -lt 12 ]; then
            # Morning: documentation and optimization
            export MORNING_BIAS="documentation_improvement,code_optimization,type_hints_addition"
          elif [ $HOUR -ge 12 ] && [ $HOUR -lt 18 ]; then
            # Afternoon: development tasks
            export AFTERNOON_BIAS="refactoring_suggestions,performance_analysis,code_comments"
          else
            # Evening: project analysis and configuration
            export EVENING_BIAS="project_analysis,configuration_update,code_optimization"
          fi
        fi
        
        # Run the smart contribution bot
        python .github/scripts/smart_contribution_bot.py
    
    - name: Commit and Push Changes
      if: steps.check_commits.outputs.skip == 'false'
      run: |
        echo "[INFO] Checking for changes to commit and push..."
        if [[ -n "$(git status --porcelain)" ]]; then
          echo "Changes detected, committing..."
          git add -A
          
          # Use time-based emoji like the bot
          HOUR=$(date +%H)
          if [ $HOUR -ge 0 ] && [ $HOUR -lt 6 ]; then
            TIME_EMOJI="üåô"
          elif [ $HOUR -ge 6 ] && [ $HOUR -lt 12 ]; then
            TIME_EMOJI="üåÖ"
          elif [ $HOUR -ge 12 ] && [ $HOUR -lt 18 ]; then
            TIME_EMOJI="‚òÄÔ∏è"
          else
            TIME_EMOJI="üåÜ"
          fi
          
          COMMIT_MSG="$TIME_EMOJI AI Enhancement - $(date '+%H:%M')"
          git commit -m "$COMMIT_MSG"
          
          # Push with retry
          MAX_RETRIES=3
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push origin ${{ github.ref_name }}; then
              echo "‚úÖ Successfully pushed changes to remote"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Push failed, retrying in 5 seconds... (attempt $RETRY_COUNT/$MAX_RETRIES)"
                sleep 5
              else
                echo "‚ùå Push failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
        else
          echo "‚ÑπÔ∏è No changes to commit or push"
        fi
    
    - name: Verify changes
      if: steps.check_commits.outputs.skip == 'false'
      run: |
        if [ -d "ai_improvements" ]; then
          echo "‚úÖ AI improvements directory created"
          IMPROVEMENT_COUNT=$(find ai_improvements -name "*.md" | wc -l)
          echo "üìÑ Total improvement files: $IMPROVEMENT_COUNT"
          echo "üìÑ Latest files:"
          ls -lt ai_improvements/*.md | head -3
        fi
        
        if [ -f "smart_bot_activity.json" ]; then
          echo "‚úÖ Smart bot activity log updated"
          echo "üìä Current stats:"
          cat smart_bot_activity.json | jq '.total_contributions, .contribution_types'
        fi
    
    - name: Log daily progress
      if: steps.check_commits.outputs.skip == 'false'
      run: |
        if [ -f "smart_bot_activity.json" ]; then
          TOTAL=$(cat smart_bot_activity.json | jq '.total_contributions')
          TODAY_COUNT=$(git log --since="24 hours ago" --oneline --grep="AI Enhancement" | wc -l)
          
          echo "üéØ Daily Progress Tracker:"
          echo "   üìà Total Contributions: $TOTAL"
          echo "   üìÖ Today's Contributions: $TODAY_COUNT"
          echo "   üé≤ Target: 50 per day"
          
          if [ $TODAY_COUNT -ge 45 ]; then
            echo "üèÜ Excellent progress! Near daily target!"
          elif [ $TODAY_COUNT -ge 30 ]; then
            echo "‚úÖ Good progress towards daily target"
          elif [ $TODAY_COUNT -ge 15 ]; then
            echo "üìä Moderate progress, ramping up"
          else
            echo "üöÄ Starting daily contribution cycle"
          fi
        fi
    
    - name: Upload Artifacts for Debug
      if: steps.check_commits.outputs.skip == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: smart-contribution-artifacts-${{ github.run_number }}
        path: |
          ai_improvements/
          smart_bot_activity.json
        retention-days: 7
        if-no-files-found: warn 